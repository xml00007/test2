{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/mergeData.js"],"names":["arrayCopy","require","composeArgs","composeArgsRight","replaceHolders","BIND_FLAG","CURRY_BOUND_FLAG","CURRY_FLAG","ARY_FLAG","REARG_FLAG","PLACEHOLDER","nativeMin","Math","min","mergeData","data","source","bitmask","srcBitmask","newBitmask","isCommon","isCombo","length","value","partials","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;AAAA,IACIC,cAAcD,QAAQ,eAAR,CADlB;AAAA,IAEIE,mBAAmBF,QAAQ,oBAAR,CAFvB;AAAA,IAGIG,iBAAiBH,QAAQ,kBAAR,CAHrB;;AAKA;AACA,IAAII,YAAY,CAAhB;AAAA,IACIC,mBAAmB,CADvB;AAAA,IAEIC,aAAa,CAFjB;AAAA,IAGIC,WAAW,GAHf;AAAA,IAIIC,aAAa,GAJjB;;AAMA;AACA,IAAIC,cAAc,wBAAlB;;AAEA;AACA,IAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;AAeA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AAC/B,MAAIC,UAAUF,KAAK,CAAL,CAAd;AAAA,MACIG,aAAaF,OAAO,CAAP,CADjB;AAAA,MAEIG,aAAaF,UAAUC,UAF3B;AAAA,MAGIE,WAAWD,aAAaX,QAH5B;;AAKA,MAAIa,UAAUH,cAAcV,QAAd,IAA0BS,WAAWV,UAArC,IAAmDW,cAAcV,QAAd,IAA0BS,WAAWR,UAArC,IAAmDM,KAAK,CAAL,EAAQO,MAAR,IAAkBN,OAAO,CAAP,CAAxH,IAAqIE,eAAeV,WAAWC,UAA1B,KAAyCQ,WAAWV,UAAvM;;AAEA;AACA,MAAI,EAAEa,YAAYC,OAAd,CAAJ,EAA4B;AAC1B,WAAON,IAAP;AACD;AACD;AACA,MAAIG,aAAab,SAAjB,EAA4B;AAC1BU,SAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACA;AACAG,kBAAcF,UAAUZ,SAAV,GAAsB,CAAtB,GAA0BC,gBAAxC;AACD;AACD;AACA,MAAIiB,QAAQP,OAAO,CAAP,CAAZ;AACA,MAAIO,KAAJ,EAAW;AACT,QAAIC,YAAWT,KAAK,CAAL,CAAf;AACAA,SAAK,CAAL,IAAUS,YAAWtB,YAAYsB,SAAZ,EAAsBD,KAAtB,EAA6BP,OAAO,CAAP,CAA7B,CAAX,GAAqDhB,UAAUuB,KAAV,CAA/D;AACAR,SAAK,CAAL,IAAUS,YAAWpB,eAAeW,KAAK,CAAL,CAAf,EAAwBL,WAAxB,CAAX,GAAkDV,UAAUgB,OAAO,CAAP,CAAV,CAA5D;AACD;AACD;AACAO,UAAQP,OAAO,CAAP,CAAR;AACA,MAAIO,KAAJ,EAAW;AACTC,eAAWT,KAAK,CAAL,CAAX;AACAA,SAAK,CAAL,IAAUS,WAAWrB,iBAAiBqB,QAAjB,EAA2BD,KAA3B,EAAkCP,OAAO,CAAP,CAAlC,CAAX,GAA0DhB,UAAUuB,KAAV,CAApE;AACAR,SAAK,CAAL,IAAUS,WAAWpB,eAAeW,KAAK,CAAL,CAAf,EAAwBL,WAAxB,CAAX,GAAkDV,UAAUgB,OAAO,CAAP,CAAV,CAA5D;AACD;AACD;AACAO,UAAQP,OAAO,CAAP,CAAR;AACA,MAAIO,KAAJ,EAAW;AACTR,SAAK,CAAL,IAAUf,UAAUuB,KAAV,CAAV;AACD;AACD;AACA,MAAIL,aAAaV,QAAjB,EAA2B;AACzBO,SAAK,CAAL,IAAUA,KAAK,CAAL,KAAW,IAAX,GAAkBC,OAAO,CAAP,CAAlB,GAA8BL,UAAUI,KAAK,CAAL,CAAV,EAAmBC,OAAO,CAAP,CAAnB,CAAxC;AACD;AACD;AACA,MAAID,KAAK,CAAL,KAAW,IAAf,EAAqB;AACnBA,SAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACD;AACD;AACAD,OAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACAD,OAAK,CAAL,IAAUI,UAAV;;AAEA,SAAOJ,IAAP;AACD;;AAEDU,OAAOC,OAAP,GAAiBZ,SAAjB;AACA","file":"mergeData.js","sourcesContent":["'use strict';\n\nlet arrayCopy = require('./arrayCopy'),\n    composeArgs = require('./composeArgs'),\n    composeArgsRight = require('./composeArgsRight'),\n    replaceHolders = require('./replaceHolders');\n\n/** Used to compose bitmasks for wrapper metadata. */\nlet BIND_FLAG = 1,\n    CURRY_BOUND_FLAG = 4,\n    CURRY_FLAG = 8,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/** Used as the internal argument placeholder. */\nlet PLACEHOLDER = '__lodash_placeholder__';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nlet nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers required to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`\n * augment function arguments, making the order in which they are executed important,\n * preventing the merging of metadata. However, we make an exception for a safe\n * common case where curried functions have `_.ary` and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  let bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < ARY_FLAG;\n\n  let isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG;\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  let value = source[3];\n  if (value) {\n    let partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = arrayCopy(value);\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n//# sourceMappingURL=mergeData.js.map"]}