{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/bindCallback.js"],"names":["identity","require","bindCallback","func","thisArg","argCount","undefined","value","call","index","collection","accumulator","other","key","object","source","apply","arguments","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,WAAWC,QAAQ,qBAAR,CAAf;;AAEA;;;;;;;;;;AAUA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOF,IAAP,IAAe,UAAnB,EAA+B;AAC7B,WAAOH,QAAP;AACD;AACD,MAAII,YAAYE,SAAhB,EAA2B;AACzB,WAAOH,IAAP;AACD;AACD,UAAQE,QAAR;AACE,SAAK,CAAL;AACE,aAAO,UAAUE,KAAV,EAAiB;AACtB,eAAOJ,KAAKK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,CAAP;AACD,OAFD;AAGF,SAAK,CAAL;AACE,aAAO,UAAUA,KAAV,EAAiBE,KAAjB,EAAwBC,UAAxB,EAAoC;AACzC,eAAOP,KAAKK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,EAA0BE,KAA1B,EAAiCC,UAAjC,CAAP;AACD,OAFD;AAGF,SAAK,CAAL;AACE,aAAO,UAAUC,WAAV,EAAuBJ,KAAvB,EAA8BE,KAA9B,EAAqCC,UAArC,EAAiD;AACtD,eAAOP,KAAKK,IAAL,CAAUJ,OAAV,EAAmBO,WAAnB,EAAgCJ,KAAhC,EAAuCE,KAAvC,EAA8CC,UAA9C,CAAP;AACD,OAFD;AAGF,SAAK,CAAL;AACE,aAAO,UAAUH,KAAV,EAAiBK,KAAjB,EAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6C;AAClD,eAAOZ,KAAKK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,EAA0BK,KAA1B,EAAiCC,GAAjC,EAAsCC,MAAtC,EAA8CC,MAA9C,CAAP;AACD,OAFD;AAdJ;AAkBA,SAAO,YAAY;AACjB,WAAOZ,KAAKa,KAAL,CAAWZ,OAAX,EAAoBa,SAApB,CAAP;AACD,GAFD;AAGD;;AAEDC,OAAOC,OAAP,GAAiBjB,YAAjB;AACA","file":"bindCallback.js","sourcesContent":["'use strict';\n\nlet identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1:\n      return function (value) {\n        return func.call(thisArg, value);\n      };\n    case 3:\n      return function (value, index, collection) {\n        return func.call(thisArg, value, index, collection);\n      };\n    case 4:\n      return function (accumulator, value, index, collection) {\n        return func.call(thisArg, accumulator, value, index, collection);\n      };\n    case 5:\n      return function (value, other, key, object, source) {\n        return func.call(thisArg, value, other, key, object, source);\n      };\n  }\n  return function () {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n//# sourceMappingURL=bindCallback.js.map"]}