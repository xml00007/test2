{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseFindIndex.js"],"names":["baseFindIndex","array","predicate","fromRight","length","index","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;;AAUA,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyCC,SAAzC,EAAoD;AAClD,MAAIC,SAASH,MAAMG,MAAnB;AAAA,MACIC,QAAQF,YAAYC,MAAZ,GAAqB,CAAC,CADlC;;AAGA,SAAOD,YAAYE,OAAZ,GAAsB,EAAEA,KAAF,GAAUD,MAAvC,EAA+C;AAC7C,QAAIF,UAAUD,MAAMI,KAAN,CAAV,EAAwBA,KAAxB,EAA+BJ,KAA/B,CAAJ,EAA2C;AACzC,aAAOI,KAAP;AACD;AACF;AACD,SAAO,CAAC,CAAR;AACD;;AAEDC,OAAOC,OAAP,GAAiBP,aAAjB;AACA","file":"baseFindIndex.js","sourcesContent":["\"use strict\";\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for callback shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromRight) {\n  let length = array.length,\n      index = fromRight ? length : -1;\n\n  while (fromRight ? index-- : ++index < length) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n//# sourceMappingURL=baseFindIndex.js.map"]}