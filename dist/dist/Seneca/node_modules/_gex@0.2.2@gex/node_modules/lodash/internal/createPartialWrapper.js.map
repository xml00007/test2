{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/createPartialWrapper.js"],"names":["createCtorWrapper","require","BIND_FLAG","createPartialWrapper","func","bitmask","thisArg","partials","isBind","Ctor","wrapper","argsIndex","argsLength","arguments","length","leftIndex","leftLength","args","Array","fn","global","apply","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,oBAAoBC,QAAQ,qBAAR,CAAxB;;AAEA;AACA,IAAIC,YAAY,CAAhB;;AAEA;;;;;;;;;;;;AAYA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,QAAtD,EAAgE;AAC9D,MAAIC,SAASH,UAAUH,SAAvB;AAAA,MACIO,OAAOT,kBAAkBI,IAAlB,CADX;;AAGA,WAASM,OAAT,GAAmB;AACjB;AACA;AACA,QAAIC,YAAY,CAAC,CAAjB;AAAA,QACIC,aAAaC,UAAUC,MAD3B;AAAA,QAEIC,YAAY,CAAC,CAFjB;AAAA,QAGIC,aAAaT,SAASO,MAH1B;AAAA,QAIIG,OAAOC,MAAMF,aAAaJ,UAAnB,CAJX;;AAMA,WAAO,EAAEG,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,WAAKF,SAAL,IAAkBR,SAASQ,SAAT,CAAlB;AACD;AACD,WAAOH,YAAP,EAAqB;AACnBK,WAAKF,WAAL,IAAoBF,UAAU,EAAEF,SAAZ,CAApB;AACD;AACD,QAAIQ,KAAK,QAAQ,SAASC,MAAjB,IAA2B,gBAAgBV,OAA3C,GAAqDD,IAArD,GAA4DL,IAArE;AACA,WAAOe,GAAGE,KAAH,CAASb,SAASF,OAAT,GAAmB,IAA5B,EAAkCW,IAAlC,CAAP;AACD;AACD,SAAOP,OAAP;AACD;;AAEDY,OAAOC,OAAP,GAAiBpB,oBAAjB;AACA","file":"createPartialWrapper.js","sourcesContent":["'use strict';\n\nlet createCtorWrapper = require('./createCtorWrapper');\n\n/** Used to compose bitmasks for wrapper metadata. */\nlet BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` and invokes it with the optional `this`\n * binding of `thisArg` and the `partials` prepended to those provided to\n * the wrapper.\n *\n * @private\n * @param {Function} func The function to partially apply arguments to.\n * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to the new function.\n * @returns {Function} Returns the new bound function.\n */\nfunction createPartialWrapper(func, bitmask, thisArg, partials) {\n  let isBind = bitmask & BIND_FLAG,\n      Ctor = createCtorWrapper(func);\n\n  function wrapper() {\n    // Avoid `arguments` object use disqualifying optimizations by\n    // converting it to an array before providing it `func`.\n    let argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength);\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    let fn = this && this !== global && this instanceof wrapper ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartialWrapper;\n//# sourceMappingURL=createPartialWrapper.js.map"]}