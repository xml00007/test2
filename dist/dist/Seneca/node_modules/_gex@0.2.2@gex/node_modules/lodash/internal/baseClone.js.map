{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseClone.js"],"names":["arrayCopy","require","arrayEach","baseAssign","baseForOwn","initCloneArray","initCloneByTag","initCloneObject","isArray","isObject","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","objectProto","Object","prototype","objToString","toString","baseClone","value","isDeep","customizer","key","object","stackA","stackB","result","undefined","isArr","tag","call","isFunc","length","push","subValue","module","exports"],"mappings":"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","file":"baseClone.js","sourcesContent":["'use strict';\n\nlet arrayCopy = require('./arrayCopy'),\n    arrayEach = require('./arrayEach'),\n    baseAssign = require('./baseAssign'),\n    baseForOwn = require('./baseForOwn'),\n    initCloneArray = require('./initCloneArray'),\n    initCloneByTag = require('./initCloneByTag'),\n    initCloneObject = require('./initCloneObject'),\n    isArray = require('../lang/isArray'),\n    isObject = require('../lang/isObject');\n\n/** `Object#toString` result references. */\nlet argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nlet arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nlet cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;\n\n/** Used for native method references. */\nlet objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nlet objToString = objectProto.toString;\n\n/**\n * The base implementation of `_.clone` without support for argument juggling\n * and `this` binding `customizer` functions.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {Function} [customizer] The function to customize cloning values.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The object `value` belongs to.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates clones with source counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, customizer, key, object, stackA, stackB) {\n  let result;\n  if (customizer) {\n    result = object ? customizer(value, key, object) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  let isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return arrayCopy(value, result);\n    }\n  } else {\n    let tag = objToString.call(value),\n        isFunc = tag == funcTag;\n\n    if (tag == objectTag || tag == argsTag || isFunc && !object) {\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return baseAssign(result, value);\n      }\n    } else {\n      return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : object ? value : {};\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n\n  let length = stackA.length;\n  while (length--) {\n    if (stackA[length] == value) {\n      return stackB[length];\n    }\n  }\n  // Add the source value to the stack of traversed objects and associate it with its clone.\n  stackA.push(value);\n  stackB.push(result);\n\n  // Recursively populate clone (susceptible to call stack limits).\n  (isArr ? arrayEach : baseForOwn)(value, function (subValue, key) {\n    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n//# sourceMappingURL=baseClone.js.map"]}