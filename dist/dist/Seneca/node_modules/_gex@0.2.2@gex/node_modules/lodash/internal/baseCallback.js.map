{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseCallback.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","baseMatches","require","baseMatchesProperty","bindCallback","identity","property","baseCallback","func","thisArg","argCount","type","undefined","module","exports"],"mappings":"AAAA;;;;AAEA,IAAIA,UAAU,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,SAAOA,OAAOC,QAAd,MAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,gBAAcA,GAAd,0CAAcA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,OAAO,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,IAAIC,WAAJ,KAAoBH,MAA3D,IAAqEE,QAAQF,OAAOI,SAApF,GAAgG,QAAhG,UAAkHF,GAAlH,0CAAkHA,GAAlH,CAAP;AAA+H,CAA5Q;;AAEA,IAAIG,cAAcC,QAAQ,eAAR,CAAlB;AAAA,IACIC,sBAAsBD,QAAQ,uBAAR,CAD1B;AAAA,IAEIE,eAAeF,QAAQ,gBAAR,CAFnB;AAAA,IAGIG,WAAWH,QAAQ,qBAAR,CAHf;AAAA,IAIII,WAAWJ,QAAQ,qBAAR,CAJf;;AAMA;;;;;;;;;;AAUA,SAASK,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAIC,OAAO,OAAOH,IAAP,KAAgB,WAAhB,GAA8B,WAA9B,GAA4Cb,QAAQa,IAAR,CAAvD;AACA,MAAIG,QAAQ,UAAZ,EAAwB;AACtB,WAAOF,YAAYG,SAAZ,GAAwBJ,IAAxB,GAA+BJ,aAAaI,IAAb,EAAmBC,OAAnB,EAA4BC,QAA5B,CAAtC;AACD;AACD,MAAIF,QAAQ,IAAZ,EAAkB;AAChB,WAAOH,QAAP;AACD;AACD,MAAIM,QAAQ,QAAZ,EAAsB;AACpB,WAAOV,YAAYO,IAAZ,CAAP;AACD;AACD,SAAOC,YAAYG,SAAZ,GAAwBN,SAASE,IAAT,CAAxB,GAAyCL,oBAAoBK,IAApB,EAA0BC,OAA1B,CAAhD;AACD;;AAEDI,OAAOC,OAAP,GAAiBP,YAAjB;AACA","file":"baseCallback.js","sourcesContent":["'use strict';\n\nlet _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nlet baseMatches = require('./baseMatches'),\n    baseMatchesProperty = require('./baseMatchesProperty'),\n    bindCallback = require('./bindCallback'),\n    identity = require('../utility/identity'),\n    property = require('../utility/property');\n\n/**\n * The base implementation of `_.callback` which supports specifying the\n * number of arguments to provide to `func`.\n *\n * @private\n * @param {*} [func=_.identity] The value to convert to a callback.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction baseCallback(func, thisArg, argCount) {\n  let type = typeof func === 'undefined' ? 'undefined' : _typeof(func);\n  if (type == 'function') {\n    return thisArg === undefined ? func : bindCallback(func, thisArg, argCount);\n  }\n  if (func == null) {\n    return identity;\n  }\n  if (type == 'object') {\n    return baseMatches(func);\n  }\n  return thisArg === undefined ? property(func) : baseMatchesProperty(func, thisArg);\n}\n\nmodule.exports = baseCallback;\n//# sourceMappingURL=baseCallback.js.map"]}