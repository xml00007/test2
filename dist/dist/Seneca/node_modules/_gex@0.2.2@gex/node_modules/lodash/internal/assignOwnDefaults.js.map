{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/assignOwnDefaults.js"],"names":["objectProto","Object","prototype","hasOwnProperty","assignOwnDefaults","objectValue","sourceValue","key","object","undefined","call","module","exports"],"mappings":"AAAA;;AAEA;;AACA,IAAIA,cAAcC,OAAOC,SAAzB;;AAEA;AACA,IAAIC,iBAAiBH,YAAYG,cAAjC;;AAEA;;;;;;;;;;;;;AAaA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCC,WAAxC,EAAqDC,GAArD,EAA0DC,MAA1D,EAAkE;AAChE,SAAOH,gBAAgBI,SAAhB,IAA6B,CAACN,eAAeO,IAAf,CAAoBF,MAApB,EAA4BD,GAA5B,CAA9B,GAAiED,WAAjE,GAA+ED,WAAtF;AACD;;AAEDM,OAAOC,OAAP,GAAiBR,iBAAjB;AACA","file":"assignOwnDefaults.js","sourcesContent":["\"use strict\";\n\n/** Used for native method references. */\nlet objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nlet hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used by `_.template` to customize its `_.assign` use.\n *\n * **Note:** This function is like `assignDefaults` except that it ignores\n * inherited property values when checking if a property is `undefined`.\n *\n * @private\n * @param {*} objectValue The destination object property value.\n * @param {*} sourceValue The source object property value.\n * @param {string} key The key associated with the object and source values.\n * @param {Object} object The destination object.\n * @returns {*} Returns the value to assign to the destination object.\n */\nfunction assignOwnDefaults(objectValue, sourceValue, key, object) {\n  return objectValue === undefined || !hasOwnProperty.call(object, key) ? sourceValue : objectValue;\n}\n\nmodule.exports = assignOwnDefaults;\n//# sourceMappingURL=assignOwnDefaults.js.map"]}