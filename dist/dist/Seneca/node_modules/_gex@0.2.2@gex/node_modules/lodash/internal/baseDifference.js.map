{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseDifference.js"],"names":["baseIndexOf","require","cacheIndexOf","createCache","LARGE_ARRAY_SIZE","baseDifference","array","values","length","result","index","indexOf","isCommon","cache","valuesLength","outer","value","valuesIndex","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;AAAA,IACIC,eAAeD,QAAQ,gBAAR,CADnB;AAAA,IAEIE,cAAcF,QAAQ,eAAR,CAFlB;;AAIA;AACA,IAAIG,mBAAmB,GAAvB;;AAEA;;;;;;;;;AASA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,SAASF,QAAQA,MAAME,MAAd,GAAuB,CAApC;AAAA,MACIC,SAAS,EADb;;AAGA,MAAI,CAACD,MAAL,EAAa;AACX,WAAOC,MAAP;AACD;AACD,MAAIC,QAAQ,CAAC,CAAb;AAAA,MACIC,UAAUX,WADd;AAAA,MAEIY,WAAW,IAFf;AAAA,MAGIC,QAAQD,YAAYL,OAAOC,MAAP,IAAiBJ,gBAA7B,GAAgDD,YAAYI,MAAZ,CAAhD,GAAsE,IAHlF;AAAA,MAIIO,eAAeP,OAAOC,MAJ1B;;AAMA,MAAIK,KAAJ,EAAW;AACTF,cAAUT,YAAV;AACAU,eAAW,KAAX;AACAL,aAASM,KAAT;AACD;AACDE,SAAO,OAAO,EAAEL,KAAF,GAAUF,MAAjB,EAAyB;AAC9B,QAAIQ,QAAQV,MAAMI,KAAN,CAAZ;;AAEA,QAAIE,YAAYI,UAAUA,KAA1B,EAAiC;AAC/B,UAAIC,cAAcH,YAAlB;AACA,aAAOG,aAAP,EAAsB;AACpB,YAAIV,OAAOU,WAAP,MAAwBD,KAA5B,EAAmC;AACjC,mBAASD,KAAT;AACD;AACF;AACDN,aAAOS,IAAP,CAAYF,KAAZ;AACD,KARD,MAQO,IAAIL,QAAQJ,MAAR,EAAgBS,KAAhB,EAAuB,CAAvB,IAA4B,CAAhC,EAAmC;AACxCP,aAAOS,IAAP,CAAYF,KAAZ;AACD;AACF;AACD,SAAOP,MAAP;AACD;;AAEDU,OAAOC,OAAP,GAAiBf,cAAjB;AACA","file":"baseDifference.js","sourcesContent":["'use strict';\n\nlet baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nlet LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values) {\n  let length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n  let index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = isCommon && values.length >= LARGE_ARRAY_SIZE ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n  outer: while (++index < length) {\n    let value = array[index];\n\n    if (isCommon && value === value) {\n      let valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    } else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n//# sourceMappingURL=baseDifference.js.map"]}