{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/string/parseInt.js"],"names":["isIterateeCall","require","trim","reHasHexPrefix","nativeParseInt","global","parseInt","string","radix","guard","test","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,iBAAiBC,QAAQ,4BAAR,CAArB;AAAA,IACIC,OAAOD,QAAQ,QAAR,CADX;;AAGA;AACA,IAAIE,iBAAiB,QAArB;;AAEA;AACA,IAAIC,iBAAiBC,OAAOC,QAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AACtC;AACA;AACA;AACA,MAAIA,QAAQT,eAAeO,MAAf,EAAuBC,KAAvB,EAA8BC,KAA9B,CAAR,GAA+CD,SAAS,IAA5D,EAAkE;AAChEA,YAAQ,CAAR;AACD,GAFD,MAEO,IAAIA,KAAJ,EAAW;AAChBA,YAAQ,CAACA,KAAT;AACD;AACDD,WAASL,KAAKK,MAAL,CAAT;AACA,SAAOH,eAAeG,MAAf,EAAuBC,UAAUL,eAAeO,IAAf,CAAoBH,MAApB,IAA8B,EAA9B,GAAmC,EAA7C,CAAvB,CAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiBN,QAAjB;AACA","file":"parseInt.js","sourcesContent":["'use strict';\n\nlet isIterateeCall = require('../internal/isIterateeCall'),\n    trim = require('./trim');\n\n/** Used to detect hexadecimal string values. */\nlet reHasHexPrefix = /^0[xX]/;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nlet nativeParseInt = global.parseInt;\n\n/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,\n * in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)\n * of `parseInt`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix] The radix to interpret `value` by.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.parseInt('08');\n * // => 8\n *\n * _.map(['6', '08', '10'], _.parseInt);\n * // => [6, 8, 10]\n */\nfunction parseInt(string, radix, guard) {\n  // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.\n  // Chrome fails to trim leading <BOM> whitespace characters.\n  // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.\n  if (guard ? isIterateeCall(string, radix, guard) : radix == null) {\n    radix = 0;\n  } else if (radix) {\n    radix = +radix;\n  }\n  string = trim(string);\n  return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));\n}\n\nmodule.exports = parseInt;\n//# sourceMappingURL=parseInt.js.map"]}