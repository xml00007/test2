{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/string/escape.js"],"names":["baseToString","require","escapeHtmlChar","reUnescapedHtml","reHasUnescapedHtml","RegExp","source","escape","string","test","replace","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;;AAGA;AACA,IAAIE,kBAAkB,WAAtB;AAAA,IACIC,qBAAqBC,OAAOF,gBAAgBG,MAAvB,CADzB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACpB;AACAA,aAASR,aAAaQ,MAAb,CAAT;AACA,WAAOA,UAAUJ,mBAAmBK,IAAnB,CAAwBD,MAAxB,CAAV,GAA4CA,OAAOE,OAAP,CAAeP,eAAf,EAAgCD,cAAhC,CAA5C,GAA8FM,MAArG;AACH;;AAEDG,OAAOC,OAAP,GAAiBL,MAAjB;AACA","file":"escape.js","sourcesContent":["'use strict';\n\nlet baseToString = require('../internal/baseToString'),\n    escapeHtmlChar = require('../internal/escapeHtmlChar');\n\n/** Used to match HTML entities and HTML characters. */\nlet reUnescapedHtml = /[&<>\"'`]/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"\\`\", in `string` to\n * their corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional characters\n * use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value.\n * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * Backticks are escaped because in Internet Explorer < 9, they can break out\n * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),\n * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and\n * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)\n * for more details.\n *\n * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)\n * to reduce XSS vectors.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n    // Reset `lastIndex` because in IE < 9 `String#replace` does not.\n    string = baseToString(string);\n    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n}\n\nmodule.exports = escape;\n//# sourceMappingURL=escape.js.map"]}