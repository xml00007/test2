{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/object/transform.js"],"names":["arrayEach","require","baseCallback","baseCreate","baseForOwn","isArray","isFunction","isObject","isTypedArray","transform","object","iteratee","accumulator","thisArg","isArr","Ctor","constructor","prototype","undefined","value","index","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAYC,QAAQ,uBAAR,CAAhB;AAAA,IACIC,eAAeD,QAAQ,0BAAR,CADnB;AAAA,IAEIE,aAAaF,QAAQ,wBAAR,CAFjB;AAAA,IAGIG,aAAaH,QAAQ,wBAAR,CAHjB;AAAA,IAIII,UAAUJ,QAAQ,iBAAR,CAJd;AAAA,IAKIK,aAAaL,QAAQ,oBAAR,CALjB;AAAA,IAMIM,WAAWN,QAAQ,kBAAR,CANf;AAAA,IAOIO,eAAeP,QAAQ,sBAAR,CAPnB;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASQ,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AACzD,MAAIC,QAAQT,QAAQK,MAAR,KAAmBF,aAAaE,MAAb,CAA/B;AACAC,aAAWT,aAAaS,QAAb,EAAuBE,OAAvB,EAAgC,CAAhC,CAAX;;AAEA,MAAID,eAAe,IAAnB,EAAyB;AACvB,QAAIE,SAASP,SAASG,MAAT,CAAb,EAA+B;AAC7B,UAAIK,OAAOL,OAAOM,WAAlB;AACA,UAAIF,KAAJ,EAAW;AACTF,sBAAcP,QAAQK,MAAR,IAAkB,IAAIK,IAAJ,EAAlB,GAA+B,EAA7C;AACD,OAFD,MAEO;AACLH,sBAAcT,WAAWG,WAAWS,IAAX,IAAmBA,KAAKE,SAAxB,GAAoCC,SAA/C,CAAd;AACD;AACF,KAPD,MAOO;AACLN,oBAAc,EAAd;AACD;AACF;AACD,GAACE,QAAQd,SAAR,GAAoBI,UAArB,EAAiCM,MAAjC,EAAyC,UAAUS,KAAV,EAAiBC,KAAjB,EAAwBV,MAAxB,EAAgC;AACvE,WAAOC,SAASC,WAAT,EAAsBO,KAAtB,EAA6BC,KAA7B,EAAoCV,MAApC,CAAP;AACD,GAFD;AAGA,SAAOE,WAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBb,SAAjB;AACA","file":"transform.js","sourcesContent":["'use strict';\n\nlet arrayEach = require('../internal/arrayEach'),\n    baseCallback = require('../internal/baseCallback'),\n    baseCreate = require('../internal/baseCreate'),\n    baseForOwn = require('../internal/baseForOwn'),\n    isArray = require('../lang/isArray'),\n    isFunction = require('../lang/isFunction'),\n    isObject = require('../lang/isObject'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own enumerable\n * properties through `iteratee`, with each invocation potentially mutating\n * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked\n * with four arguments: (accumulator, value, key, object). Iteratee functions\n * may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Array|Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * });\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {\n *   result[key] = n * 3;\n * });\n * // => { 'a': 3, 'b': 6 }\n */\nfunction transform(object, iteratee, accumulator, thisArg) {\n  let isArr = isArray(object) || isTypedArray(object);\n  iteratee = baseCallback(iteratee, thisArg, 4);\n\n  if (accumulator == null) {\n    if (isArr || isObject(object)) {\n      let Ctor = object.constructor;\n      if (isArr) {\n        accumulator = isArray(object) ? new Ctor() : [];\n      } else {\n        accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);\n      }\n    } else {\n      accumulator = {};\n    }\n  }\n  (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n//# sourceMappingURL=transform.js.map"]}