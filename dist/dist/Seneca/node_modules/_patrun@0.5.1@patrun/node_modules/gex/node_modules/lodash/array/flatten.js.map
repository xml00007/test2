{"version":3,"sources":["../../../../../../../../../Seneca/node_modules/_patrun@0.5.1@patrun/node_modules/gex/node_modules/lodash/array/flatten.js"],"names":["baseFlatten","require","isIterateeCall","flatten","array","isDeep","guard","length","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAcC,QAAQ,yBAAR,CAAlB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;;AAGA;;;;;;;;;;;;;;;;;;;;AAoBA,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuC;AACrC,MAAIC,SAASH,QAAQA,MAAMG,MAAd,GAAuB,CAApC;AACA,MAAID,SAASJ,eAAeE,KAAf,EAAsBC,MAAtB,EAA8BC,KAA9B,CAAb,EAAmD;AACjDD,aAAS,KAAT;AACD;AACD,SAAOE,SAASP,YAAYI,KAAZ,EAAmBC,MAAnB,CAAT,GAAsC,EAA7C;AACD;;AAEDG,OAAOC,OAAP,GAAiBN,OAAjB;AACA","file":"flatten.js","sourcesContent":["'use strict';\n\nlet baseFlatten = require('../internal/baseFlatten'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Flattens a nested array. If `isDeep` is `true` the array is recursively\n * flattened, otherwise it is only flattened a single level.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {boolean} [isDeep] Specify a deep flatten.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, 3, [4]]]);\n * // => [1, 2, 3, [4]]\n *\n * // using `isDeep`\n * _.flatten([1, [2, 3, [4]]], true);\n * // => [1, 2, 3, 4]\n */\nfunction flatten(array, isDeep, guard) {\n  let length = array ? array.length : 0;\n  if (guard && isIterateeCall(array, isDeep, guard)) {\n    isDeep = false;\n  }\n  return length ? baseFlatten(array, isDeep) : [];\n}\n\nmodule.exports = flatten;\n//# sourceMappingURL=flatten.js.map"]}