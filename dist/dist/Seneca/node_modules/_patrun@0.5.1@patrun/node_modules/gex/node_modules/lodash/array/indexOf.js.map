{"version":3,"sources":["../../../../../../../../../Seneca/node_modules/_patrun@0.5.1@patrun/node_modules/gex/node_modules/lodash/array/indexOf.js"],"names":["baseIndexOf","require","binaryIndex","nativeMax","Math","max","indexOf","array","value","fromIndex","length","index","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,cAAcC,QAAQ,yBAAR,CAAlB;AAAA,IACIC,cAAcD,QAAQ,yBAAR,CADlB;;AAGA;AACA,IAAIE,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0C;AACxC,MAAIC,SAASH,QAAQA,MAAMG,MAAd,GAAuB,CAApC;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,CAAC,CAAR;AACD;AACD,MAAI,OAAOD,SAAP,IAAoB,QAAxB,EAAkC;AAChCA,gBAAYA,YAAY,CAAZ,GAAgBN,UAAUO,SAASD,SAAnB,EAA8B,CAA9B,CAAhB,GAAmDA,SAA/D;AACD,GAFD,MAEO,IAAIA,SAAJ,EAAe;AACpB,QAAIE,QAAQT,YAAYK,KAAZ,EAAmBC,KAAnB,CAAZ;AACA,QAAIG,QAAQD,MAAR,KAAmBF,UAAUA,KAAV,GAAkBA,UAAUD,MAAMI,KAAN,CAA5B,GAA2CJ,MAAMI,KAAN,MAAiBJ,MAAMI,KAAN,CAA/E,CAAJ,EAAkG;AAChG,aAAOA,KAAP;AACD;AACD,WAAO,CAAC,CAAR;AACD;AACD,SAAOX,YAAYO,KAAZ,EAAmBC,KAAnB,EAA0BC,aAAa,CAAvC,CAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBP,OAAjB;AACA","file":"indexOf.js","sourcesContent":["'use strict';\n\nlet baseIndexOf = require('../internal/baseIndexOf'),\n    binaryIndex = require('../internal/binaryIndex');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nlet nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it is used as the offset\n * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`\n * performs a faster binary search.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {boolean|number} [fromIndex=0] The index to search from or `true`\n *  to perform a binary search on a sorted array.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // using `fromIndex`\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n *\n * // performing a binary search\n * _.indexOf([1, 1, 2, 2], 2, true);\n * // => 2\n */\nfunction indexOf(array, value, fromIndex) {\n  let length = array ? array.length : 0;\n  if (!length) {\n    return -1;\n  }\n  if (typeof fromIndex == 'number') {\n    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;\n  } else if (fromIndex) {\n    let index = binaryIndex(array, value);\n    if (index < length && (value === value ? value === array[index] : array[index] !== array[index])) {\n      return index;\n    }\n    return -1;\n  }\n  return baseIndexOf(array, value, fromIndex || 0);\n}\n\nmodule.exports = indexOf;\n//# sourceMappingURL=indexOf.js.map"]}