{"version":3,"sources":["../../sequelize/dbConnect.js"],"names":["Sequelize","require","Mongoose","L","console","log","chalk","querystring","Promise","module","exports","default","dbConnect","server","config","mongodb","reject","Error","mysql","_mongodb","_mysql","seq","global","__seq","database","user","password","option","__mongodb_no_need_connect","hosts","join","pass","opts","optUri","useMongoClient","stringify","uri","resolve","authenticate","then","res","catch","err","message"],"mappings":"AAAA;;AACA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,WAAWD,QAAQ,UAAR,CAAjB;AACA,IAAME,IAAIC,QAAQC,GAAlB;AACA,IAAMC,QAAQL,QAAQ,OAAR,CAAd;AACA,IAAMM,cAAcN,QAAQ,aAAR,CAApB;;AAEAC,SAASM,OAAT,GAAmBP,QAAQ,UAAR,CAAnB;;AAEAQ,OAAOC,OAAP,CAAeC,OAAf,GAAyBF,OAAOC,OAAP,GAAiB,SAASE,SAAT,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;AAC3E,MAAI,CAACA,MAAD,IAAW,CAACA,OAAOC,OAAvB,EAAgC;AAC9B,WAAOP,QAAQQ,MAAR,CACH,IAAIC,KAAJ,CAAU,mDAAV,CADG,CAAP;AAED;AACD,MAAI,CAACH,MAAD,IAAW,CAACA,OAAOI,KAAvB,EAA8B;AAC5B,WAAOV,QAAQQ,MAAR,CACH,IAAIC,KAAJ,CAAU,iDAAV,CADG,CAAP;AAED;;AAED,MAAME,WAAWL,OAAOC,OAAxB;AACA,MAAMK,SAASN,OAAOI,KAAtB;AACA,MAAMG,MAAMC,OAAOC,KAAP,GAAe,IAAIvB,SAAJ,CAAcoB,OAAOI,QAArB,EAA+BJ,OAAOK,IAAtC,EACvBL,OAAOM,QADgB,EACNN,OAAOO,MADD,CAA3B;;AAGA;AACA,MAAI,CAACL,OAAOM,yBAAZ,EAAuC;AACrC,QAAMC,QAAQV,SAASU,KAAT,CAAeC,IAAf,CAAoB,GAApB,CAAd;AADqC,QAE9BN,QAF8B,GAEAL,QAFA,CAE9BK,QAF8B;AAAA,QAEpBC,IAFoB,GAEAN,QAFA,CAEpBM,IAFoB;AAAA,QAEdM,IAFc,GAEAZ,QAFA,CAEdY,IAFc;AAAA,QAERC,IAFQ,GAEAb,QAFA,CAERa,IAFQ;;AAGrC,QAAMC,SAASD,KAAKE,cAAL,GAAsB,EAAtB,GAA2B,MAAM3B,YAAY4B,SAAZ,CAAsBH,IAAtB,CAAhD;AACA,QAAMI,qBAAmBX,IAAnB,SAA2BM,IAA3B,SAAmCF,KAAnC,SAA4CL,QAA5C,GAAuDS,MAA7D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,SAAO,IAAIzB,OAAJ,CAAY,UAAC6B,OAAD,EAAUrB,MAAV,EAAqB;AACtC,QAAI;AACF;AACA;;AAEA;AACA;;AAEA;AACAK,UAAIiB,YAAJ,GAAmBC,IAAnB,CAAwB,UAACC,GAAD,EAAS;AAC/BrC,UAAE,eAAF;AACAkC,gBAAQG,GAAR;AACD,OAHD,EAGGC,KAHH,CAGS,UAACC,GAAD,EAAS;AAChBvC,UAAE,eAAF;AACAa,eAAO,IAAIC,KAAJ,CAAU,aAAayB,IAAIC,OAA3B,CAAP;AACD,OAND;AAOD,KAfD,CAeE,OAAOD,GAAP,EAAY;AACZ1B,aAAO,IAAIC,KAAJ,CAAU,aAAayB,IAAIC,OAA3B,CAAP;AACD;AACF,GAnBM,CAAP;AAoBD,CAlDD","file":"dbConnect.js","sourcesContent":["'use strict';\nconst Sequelize = require('sequelize');\nconst Mongoose = require('mongoose');\nconst L = console.log;\nconst chalk = require('chalk');\nconst querystring = require('querystring');\n\nMongoose.Promise = require('bluebird');\n\nmodule.exports.default = module.exports = function dbConnect(server, config) {\n  if (!config || !config.mongodb) {\n    return Promise.reject(\n        new Error('dbConnect: nirvana-sdk-config.mongodb is required'));\n  }\n  if (!config || !config.mysql) {\n    return Promise.reject(\n        new Error('dbConnect: nirvana-sdk-config.mysql is required'));\n  }\n\n  const _mongodb = config.mongodb;\n  const _mysql = config.mysql;\n  const seq = global.__seq = new Sequelize(_mysql.database, _mysql.user,\n      _mysql.password, _mysql.option);\n\n  // 如果存在全局选项 __mongodb_no_need_connect ， 则不连接mongo\n  if (!global.__mongodb_no_need_connect) {\n    const hosts = _mongodb.hosts.join(',');\n    const {database, user, pass, opts} = _mongodb;\n    const optUri = opts.useMongoClient ? '' : '?' + querystring.stringify(opts);\n    const uri = `mongodb://${user}:${pass}@${hosts}/${database}${optUri}`;\n\n    // L('正在连接 Mongodb ...');\n    // Mongoose.connect(uri, _mongodb.opts).then((res) => {\n    //   L('MONGODB => 连接成功');\n    // }).catch(err => {\n    //   L(chalk.red('MONGODB => 连接失败'), uri, _mongodb.opts, err);\n    // });\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      // 需要授权连接方法 参考：\n      // http://stackoverflow.com/questions/30105823/mongoerror-auth-failed-mongoose-connection-sting\n\n      // const uri = `mongodb://${_mongodb.username}:${_mongodb.password}@${_mongodb.host}/${_mongodb.database}`;\n      // global.__mongo = Mongoose.connect(uri);\n\n      // 数据库连接较验\n      seq.authenticate().then((res) => {\n        L('MYSQL => 连接成功');\n        resolve(res);\n      }).catch((err) => {\n        L('MYSQL => 连接失败');\n        reject(new Error('数据库接接失败 ' + err.message));\n      });\n    } catch (err) {\n      reject(new Error('数据库接接失败 ' + err.message));\n    }\n  });\n};\n"]}