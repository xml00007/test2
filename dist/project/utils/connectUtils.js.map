{"version":3,"sources":["../../../project/utils/connectUtils.js"],"names":["dbInit","insertUser","insertUserNew","deleteSql","selectSql","mongoSelectSql","database","require","jieaMock","Sequlize","nirvanaMysql","databaseConfig","jieaMysql","holmesMysql","testSeq","jieaSeq","global","__nirvanaSeq","user","password","option","__mongoSeq","__holmesSeq","table","data","result","fileds","Object","keys","values","map","item","JSON","stringify","sqlStr","join","query","type","QueryTypes","INSERT","err","console","log","indexOf","toString","DELETE","SELECT","code","beforeAll","afterAll","close","__mongo","disconnect"],"mappings":"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","file":"connectUtils.js","sourcesContent":["/**\n * Created by liudezhong on 2017/5/8.\n */\n/**\n * 连接mysql数据库\n */\n'use strict';\n// import * as database from '../config/config';\nconst database = require('../config');\nconst jieaMock = require('../mock/jieaMock');\nconst Sequlize = require('sequelize');\n\n// 定义两个数据库配置文件\n\nconst nirvanaMysql = database.databaseConfig.nirvanaMysql;\nconst jieaMysql = database.databaseConfig.jieaMysql;\nconst holmesMysql = database.databaseConfig.holmesMysql;\n\nlet testSeq = null;\nlet jieaSeq = null;\n\nexport async function dbInit() {\n  if (!global.__nirvanaSeq) {\n    global.__nirvanaSeq = new Sequlize(nirvanaMysql.database, nirvanaMysql.user,\n      nirvanaMysql.password, nirvanaMysql.option);\n  }\n  if (jieaSeq === null) {\n    jieaSeq = new Sequlize(jieaMysql.database, jieaMysql.user,\n      jieaMysql.password, jieaMysql.option);\n  }\n  if (!global.__mongoSeq) {\n    global.__mongoSeq = new Sequlize(nirvanaMysql.database, nirvanaMysql.user,\n      nirvanaMysql.password, nirvanaMysql.option);\n  }\n  if (!global.__holmesSeq) {\n    global.__holmesSeq = new Sequlize(holmesMysql.database, holmesMysql.user,\n      holmesMysql.password, holmesMysql.option);\n  }\n}\n\nexport async function insertUser(table, data) {\n  let result = {};\n  try{\n    const fileds = Object.keys(data);\n    const values = fileds.map(\n      (item) => JSON.stringify(data[item]));\n\n    // console.error('values======>', JSON.stringify(values));\n    const sqlStr = `insert into ${table}(${fileds.join(\n      ',')}) values(${values.join(',')})`;\n    // console.error('sqlStr======>', sqlStr);\n    result = await jieaSeq.query(sqlStr, {type: jieaSeq.QueryTypes.INSERT});\n  }catch (err) {\n    console.log(err);\n  }\n  return result;\n}\n\nexport async function insertUserNew(table, data) {\n  let result = {};\n  try {\n    const fileds = Object.keys(data);\n    const values = fileds.map(\n      (item) => JSON.stringify(data[item]));\n\n    // console.error('values======>', JSON.stringify(values));\n    const sqlStr = `insert into ${table}(${fileds.join(\n      ',')}) values(${values.join(',')})`;\n    if (table.indexOf('risk') > -1) {\n      result = await global.__holmesSeq.query(sqlStr, {type: Sequlize.QueryTypes.INSERT});\n    } else {\n      result = await global.__nirvanaSeq.query(sqlStr, {type: Sequlize.QueryTypes.INSERT});\n    }\n    console.log(result);\n  } catch (err) {\n    console.log(err.toString());\n  }\n  return result;\n}\n\n\nexport async function deleteSql(sqlStr, database) {\n  let result = {};\n  try {\n    console.log(sqlStr);\n    if (database === 'nirvana') {\n      result = await global.__nirvanaSeq.query(sqlStr, {type: Sequlize.QueryTypes.DELETE});\n      console.log(result);\n    }else if (database === 'jiea') {\n      result = await jieaSeq.query(sqlStr, {type: jieaSeq.QueryTypes.DELETE});\n    } else if (database === 'holmes') {\n      result = await global.__holmesSeq.query(sqlStr, {type: Sequlize.QueryTypes.DELETE});\n    }\n    return result;\n  }catch(err) {\n    console.log(err);\n    return err;\n  }\n}\n\nexport async function selectSql(sqlStr, database) {\n  let result = {};\n  try {\n    console.log(sqlStr);\n    if (database === 'nirvana') {\n      result = await global.__nirvanaSeq.query(sqlStr, {type: Sequlize.QueryTypes.SELECT});\n    }else if (database === 'jiea') {\n      result = await jieaSeq.query(sqlStr, {type: jieaSeq.QueryTypes.SELECT});\n    }\n    result.code = 200;\n  }catch(err) {\n    console.log(err);\n    result.code = 400;\n  }\n  return result;\n}\n\nexport async function mongoSelectSql(sqlStr, database) {\n  let result = {};\n  try {\n    console.log(sqlStr);\n    if (database === 'nirvana') {\n      result = await global.__nirvanaSeq.query(sqlStr, {type: Sequlize.QueryTypes.SELECT});\n    } else if (database === 'jiea') {\n      result = await jieaSeq.query(sqlStr, {type: jieaSeq.QueryTypes.SELECT});\n    }\n    result.code = 200;\n  } catch (err) {\n    console.log(err);\n    result.code = 400;\n  }\n  return result;\n}\n\nbeforeAll(() => {\n  dbInit();\n});\n\nafterAll(() => {\n  // 中断数据库连接\n  global.__nirvanaSeq.close();\n  global.__mongo.disconnect();\n  jieaSeq.close();\n  global.__holmesSeq.close();\n  // testSeq = null;\n  // jieaMysql = null;\n});\n\n"]}