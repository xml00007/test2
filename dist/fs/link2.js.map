{"version":3,"sources":["../../fs/link2.js"],"names":["fs","require","path","rootPath","process","cwd","log","console","packages","scope","relativePath","dir","from","normalize","to","relative","shell","cmd","execSync","encoding","linkSync","map","item","filter","existsSync"],"mappings":";;AAAA;;;;AAIA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,WAAWC,QAAQC,GAAR,EAAjB;AACA,IAAMC,MAAMC,QAAQD,GAApB;;AAEA,IAAME,WAAW,CACf,UADe,EAEf,YAFe,EAGf,WAHe,CAAjB;AAKA,IAAMC,QAAQ,uBAAd;;AAEA;AACA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAS;AAC5B,MAAMC,OAAOV,KAAKW,SAAL,CAAeV,WAAW,GAAX,GAAiBM,KAAhC,CAAb;AACA,MAAMK,KAAKH,GAAX;AACA,SAAOT,KAAKa,QAAL,CAAcH,IAAd,EAAoBE,EAApB,CAAP;AACD,CAJD;;AAMA,SAASE,KAAT,CAAeC,GAAf,EAAoB;AAClB,SAAOhB,QAAQ,eAAR,EAAyBiB,QAAzB,CAAkCD,GAAlC,EAAuC,EAACE,UAAU,OAAX,EAAvC,CAAP;AACD;;AAED,SAASC,QAAT,CAAkBZ,QAAlB,EAA4B;AAC1B;AACAQ,oBAAgBP,KAAhB;AACA;AACAO,sBAAkBP,KAAlB;;AAEAD,aAAWA,SAASa,GAAT,CAAa;AAAA,WAAQnB,KAAKW,SAAL,CAAeV,WAAW,GAAX,GAAiBmB,IAAhC,CAAR;AAAA,GAAb,EACVC,MADU,CACH;AAAA,WAAQvB,GAAGwB,UAAH,CAAcF,IAAd,CAAR;AAAA,GADG,CAAX;AAEAhB,MAAIE,QAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDY,SAASZ,QAAT","file":"link2.js","sourcesContent":["/**\n * Created by 高乐天 on 17/5/19.\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst rootPath = process.cwd();\nconst log = console.log;\n\nconst packages = [\n  'packages',\n  'dependency',\n  'submodule',\n];\nconst scope = 'node_modules/@nirvana';\n\n// 返回相对路径\nconst relativePath = (dir) => {\n  const from = path.normalize(rootPath + '/' + scope);\n  const to = dir;\n  return path.relative(from, to);\n};\n\nfunction shell(cmd) {\n  return require('child_process').execSync(cmd, {encoding: 'utf-8'});\n}\n\nfunction linkSync(packages) {\n  // delete @nirvana\n  shell(`rm -rf ${scope}`);\n  // recreate @nirvana dir\n  shell(`mkdir -p ${scope}`);\n\n  packages = packages.map(item => path.normalize(rootPath + '/' + item))\n  .filter(item => fs.existsSync(item));\n  log(packages);\n  // const jsonPaths = shell(`find ${packages.join(' ')} -name package.json -type f`)\n  // .trim().split('\\n')\n  // .filter(item => {\n  //   let name = require(item).name;\n  //   return name[0] === '@';\n  // });\n  //\n  // jsonPaths.forEach(jsonPath => {\n  //   const dirPath = path.dirname(jsonPath);\n  //   const srcPath = `${dirPath}/src`;\n  //   const dirName = path.basename(dirPath);\n  //\n  //   const linkPath = path.normalize(`${scope}/${dirName}`);\n  //   const target = fs.existsSync(srcPath) ? `${relativePath(srcPath)}` : `${relativePath(dirPath)}`;\n  //\n  //   fs.symlinkSync(target, linkPath, 'dir');\n  //\n  //   log(`${linkPath} --> ${target}`);\n  // });\n}\n\nlinkSync(packages);\n"]}