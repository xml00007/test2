{"version":3,"sources":["../../fs/readFile.js"],"names":["fs","require","chalk","log","console","packages","Path","iconv","warning","red","myModules","readdirSync","filter","name","promiseAll","map","item","url","join","a","Promise","reslove","reject","readFile","encoding","err","data","all","then","str","decode"],"mappings":";;AAAA;;;AAGA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,MAAMC,QAAQD,GAApB;AACA,IAAME,WAAW,wBAAjB;AACA,IAAMC,OAAOL,QAAQ,MAAR,CAAb;AACA,IAAIM,QAAQN,QAAQ,YAAR,CAAZ;;AAEA,SAASO,OAAT,GAAyB;AACvBJ,UAAQD,GAAR,CAAYD,MAAMO,GAAN,wBAAZ;AACD;;AAED,IAAIC,YAAYV,GAAGW,WAAH,CAAeN,QAAf,EAAyBO,MAAzB,CAAgC;AAAA,SAAQC,SAAS,WAAjB;AAAA,CAAhC,CAAhB;;AAEAL,QAAQE,SAAR;AACA,IAAMI,aAAaJ,UAAUK,GAAV,CACf,UAACC,IAAD,EAAU;AACR,MAAMC,MAAMX,KAAKY,IAAL,CAAUb,QAAV,EAAoBW,IAApB,CAAZ;AACA,MAAIG,IAAI,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC5CtB,OAAGuB,QAAH,CAAYN,GAAZ,EAAiB,EAACO,UAAU,OAAX,EAAjB,EAAsC,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACxD,UAAID,GAAJ,EAAS;AACPH,eAAOG,GAAP;AACD;AACDJ,cAAQ,EAACR,MAAMI,GAAP,EAAYS,UAAZ,EAAR;AACD,KALD;AAMD,GAPO,CAAR;AAQA,SAAOP,CAAP;AACD,CAZc,CAAnB;;AAcAC,QAAQO,GAAR,CAAYb,UAAZ,EAAwBc,IAAxB,CAA6B,UAASF,IAAT,EAAe;AAC1CA,OAAKX,GAAL,CAAS,gBAAQ;AACfX,YAAQD,GAAR,CAAYa,KAAKU,IAAjB;AACA;AACA;AACA,QAAIG,MAAMtB,MAAMuB,MAAN,CAAad,KAAKU,IAAlB,EAAwB,QAAxB,CAAV;AACAtB,YAAQD,GAAR,CAAY0B,GAAZ;AACD,GAND;AAOD,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"readFile.js","sourcesContent":["/**\n * Created by Arthur on 17/9/4.\n */\nconst fs = require('fs');\nconst chalk = require('chalk');\nconst log = console.log;\nconst packages = '/Users/jinke/Downloads';\nconst Path = require('path');\nlet iconv = require('iconv-lite');\n\nfunction warning(...arg) {\n  console.log(chalk.red(...arg));\n}\n\nlet myModules = fs.readdirSync(packages).filter(name => name === '1221.docx');\n\nwarning(myModules);\nconst promiseAll = myModules.map(\n    (item) => {\n      const url = Path.join(packages, item);\n      let a = new Promise(function(reslove, reject) {\n        fs.readFile(url, {encoding: 'utf-8'}, function(err, data) {\n          if (err) {\n            reject(err);\n          }\n          reslove({name: url, data});\n        });\n      });\n      return a;\n    });\n\nPromise.all(promiseAll).then(function(data) {\n  data.map(item => {\n    console.log(item.data);\n    // const data1 = item.data.toString().replace(/(!(\\S+)\\s\\|\\|\\s\\S+.code\\s!==\\s200)/g, 'Message.isFailed($2)');\n    // const data1 = item.data.toString().replace(/\\((\\S+).code\\s!==\\s200\\)/g, '(Message.isFailed($1))');\n    let str = iconv.decode(item.data, 'gb2312');\n    console.log(str);\n  });\n});\n\n// let invalidNames = packageJsons.filter(item => {\n//   return item.name.substr(0, 8) === '@nirvana';\n// });\n//\n// // 输出\n// if (invalidNames.length) {\n//   warning('检测到不合法的包名称: 正确包名格式为 @nirvana/pacakge-name');\n//   warning(invalidNames.map(item => item.name).join('\\n'));\n// }\n\n"]}