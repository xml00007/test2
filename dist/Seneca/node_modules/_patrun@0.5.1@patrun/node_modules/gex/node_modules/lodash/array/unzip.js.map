{"version":3,"sources":["../../../../../../../../../Seneca/node_modules/_patrun@0.5.1@patrun/node_modules/gex/node_modules/lodash/array/unzip.js"],"names":["arrayFilter","require","arrayMap","baseProperty","isArrayLike","nativeMax","Math","max","unzip","array","length","index","group","result","Array","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,yBAAR,CAAlB;AAAA,IACIC,WAAWD,QAAQ,sBAAR,CADf;AAAA,IAEIE,eAAeF,QAAQ,0BAAR,CAFnB;AAAA,IAGIG,cAAcH,QAAQ,yBAAR,CAHlB;;AAKA;AACA,IAAII,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,MAAI,EAAEA,SAASA,MAAMC,MAAjB,CAAJ,EAA8B;AAC5B,WAAO,EAAP;AACD;AACD,MAAIC,QAAQ,CAAC,CAAb;AAAA,MACID,SAAS,CADb;;AAGAD,UAAQT,YAAYS,KAAZ,EAAmB,UAASG,KAAT,EAAgB;AACzC,QAAIR,YAAYQ,KAAZ,CAAJ,EAAwB;AACtBF,eAASL,UAAUO,MAAMF,MAAhB,EAAwBA,MAAxB,CAAT;AACA,aAAO,IAAP;AACD;AACF,GALO,CAAR;AAMA,MAAIG,SAASC,MAAMJ,MAAN,CAAb;AACA,SAAO,EAAEC,KAAF,GAAUD,MAAjB,EAAyB;AACvBG,WAAOF,KAAP,IAAgBT,SAASO,KAAT,EAAgBN,aAAaQ,KAAb,CAAhB,CAAhB;AACD;AACD,SAAOE,MAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBR,KAAjB","file":"unzip.js","sourcesContent":["var arrayFilter = require('../internal/arrayFilter'),\n    arrayMap = require('../internal/arrayMap'),\n    baseProperty = require('../internal/baseProperty'),\n    isArrayLike = require('../internal/isArrayLike');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);\n * // => [['fred', 30, true], ['barney', 40, false]]\n *\n * _.unzip(zipped);\n * // => [['fred', 'barney'], [30, 40], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var index = -1,\n      length = 0;\n\n  array = arrayFilter(array, function(group) {\n    if (isArrayLike(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = arrayMap(array, baseProperty(index));\n  }\n  return result;\n}\n\nmodule.exports = unzip;\n"]}