{"version":3,"sources":["../../../../../../../../../Seneca/node_modules/_patrun@0.5.1@patrun/node_modules/gex/node_modules/lodash/array/unzipWith.js"],"names":["arrayMap","require","arrayReduce","bindCallback","unzip","unzipWith","array","iteratee","thisArg","length","result","group","undefined","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,sBAAR,CAAf;AAAA,IACIC,cAAcD,QAAQ,yBAAR,CADlB;AAAA,IAEIE,eAAeF,QAAQ,0BAAR,CAFnB;AAAA,IAGIG,QAAQH,QAAQ,SAAR,CAHZ;;AAKA;;;;;;;;;;;;;;;;;;;;AAoBA,SAASI,SAAT,CAAmBC,KAAnB,EAA0BC,QAA1B,EAAoCC,OAApC,EAA6C;AAC3C,MAAIC,SAASH,QAAQA,MAAMG,MAAd,GAAuB,CAApC;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAIC,SAASN,MAAME,KAAN,CAAb;AACA,MAAIC,YAAY,IAAhB,EAAsB;AACpB,WAAOG,MAAP;AACD;AACDH,aAAWJ,aAAaI,QAAb,EAAuBC,OAAvB,EAAgC,CAAhC,CAAX;AACA,SAAOR,SAASU,MAAT,EAAiB,UAASC,KAAT,EAAgB;AACtC,WAAOT,YAAYS,KAAZ,EAAmBJ,QAAnB,EAA6BK,SAA7B,EAAwC,IAAxC,CAAP;AACD,GAFM,CAAP;AAGD;;AAEDC,OAAOC,OAAP,GAAiBT,SAAjB","file":"unzipWith.js","sourcesContent":["var arrayMap = require('../internal/arrayMap'),\n    arrayReduce = require('../internal/arrayReduce'),\n    bindCallback = require('../internal/bindCallback'),\n    unzip = require('./unzip');\n\n/**\n * This method is like `_.unzip` except that it accepts an iteratee to specify\n * how regrouped values should be combined. The `iteratee` is bound to `thisArg`\n * and invoked with four arguments: (accumulator, value, index, group).\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} [iteratee] The function to combine regrouped values.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * _.unzipWith(zipped, _.add);\n * // => [3, 30, 300]\n */\nfunction unzipWith(array, iteratee, thisArg) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  var result = unzip(array);\n  if (iteratee == null) {\n    return result;\n  }\n  iteratee = bindCallback(iteratee, thisArg, 4);\n  return arrayMap(result, function(group) {\n    return arrayReduce(group, iteratee, undefined, true);\n  });\n}\n\nmodule.exports = unzipWith;\n"]}