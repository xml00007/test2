{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/utility/mixin.js"],"names":["arrayCopy","require","arrayPush","baseFunctions","isFunction","isObject","keys","mixin","object","source","options","methodNames","chain","index","isFunc","length","methodName","func","prototype","chainAll","__chain__","result","__wrapped__","actions","__actions__","push","arguments","apply","value","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,uBAAR,CAAhB;AAAA,IACIC,YAAYD,QAAQ,uBAAR,CADhB;AAAA,IAEIE,gBAAgBF,QAAQ,2BAAR,CAFpB;AAAA,IAGIG,aAAaH,QAAQ,oBAAR,CAHjB;AAAA,IAIII,WAAWJ,QAAQ,kBAAR,CAJf;AAAA,IAKIK,OAAOL,QAAQ,gBAAR,CALX;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAASM,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACtC,MAAIC,cAAcR,cAAcM,MAAd,EAAsBH,KAAKG,MAAL,CAAtB,CAAlB;;AAEA,MAAIG,QAAQ,IAAZ;AAAA,MACIC,QAAQ,CAAC,CADb;AAAA,MAEIC,SAASV,WAAWI,MAAX,CAFb;AAAA,MAGIO,SAASJ,YAAYI,MAHzB;;AAKA,MAAIL,YAAY,KAAhB,EAAuB;AACrBE,YAAQ,KAAR;AACD,GAFD,MAEO,IAAIP,SAASK,OAAT,KAAqB,WAAWA,OAApC,EAA6C;AAClDE,YAAQF,QAAQE,KAAhB;AACD;AACD,SAAO,EAAEC,KAAF,GAAUE,MAAjB,EAAyB;AACvB,QAAIC,aAAaL,YAAYE,KAAZ,CAAjB;AAAA,QACII,OAAOR,OAAOO,UAAP,CADX;;AAGAR,WAAOQ,UAAP,IAAqBC,IAArB;AACA,QAAIH,MAAJ,EAAY;AACVN,aAAOU,SAAP,CAAiBF,UAAjB,IAAgC,UAASC,IAAT,EAAe;AAC7C,eAAO,YAAW;AAChB,cAAIE,WAAW,KAAKC,SAApB;AACA,cAAIR,SAASO,QAAb,EAAuB;AACrB,gBAAIE,SAASb,OAAO,KAAKc,WAAZ,CAAb;AAAA,gBACIC,UAAUF,OAAOG,WAAP,GAAqBxB,UAAU,KAAKwB,WAAf,CADnC;;AAGAD,oBAAQE,IAAR,CAAa,EAAE,QAAQR,IAAV,EAAgB,QAAQS,SAAxB,EAAmC,WAAWlB,MAA9C,EAAb;AACAa,mBAAOD,SAAP,GAAmBD,QAAnB;AACA,mBAAOE,MAAP;AACD;AACD,iBAAOJ,KAAKU,KAAL,CAAWnB,MAAX,EAAmBN,UAAU,CAAC,KAAK0B,KAAL,EAAD,CAAV,EAA0BF,SAA1B,CAAnB,CAAP;AACD,SAXD;AAYD,OAb+B,CAa9BT,IAb8B,CAAhC;AAcD;AACF;AACD,SAAOT,MAAP;AACD;;AAEDqB,OAAOC,OAAP,GAAiBvB,KAAjB","file":"mixin.js","sourcesContent":["var arrayCopy = require('../internal/arrayCopy'),\n    arrayPush = require('../internal/arrayPush'),\n    baseFunctions = require('../internal/baseFunctions'),\n    isFunction = require('../lang/isFunction'),\n    isObject = require('../lang/isObject'),\n    keys = require('../object/keys');\n\n/**\n * Adds all own enumerable function properties of a source object to the\n * destination object. If `object` is a function then methods are added to\n * its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options] The options object.\n * @param {boolean} [options.chain=true] Specify whether the functions added\n *  are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\nfunction mixin(object, source, options) {\n  var methodNames = baseFunctions(source, keys(source));\n\n  var chain = true,\n      index = -1,\n      isFunc = isFunction(object),\n      length = methodNames.length;\n\n  if (options === false) {\n    chain = false;\n  } else if (isObject(options) && 'chain' in options) {\n    chain = options.chain;\n  }\n  while (++index < length) {\n    var methodName = methodNames[index],\n        func = source[methodName];\n\n    object[methodName] = func;\n    if (isFunc) {\n      object.prototype[methodName] = (function(func) {\n        return function() {\n          var chainAll = this.__chain__;\n          if (chain || chainAll) {\n            var result = object(this.__wrapped__),\n                actions = result.__actions__ = arrayCopy(this.__actions__);\n\n            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n            result.__chain__ = chainAll;\n            return result;\n          }\n          return func.apply(object, arrayPush([this.value()], arguments));\n        };\n      }(func));\n    }\n  }\n  return object;\n}\n\nmodule.exports = mixin;\n"]}