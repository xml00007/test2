{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/utility/range.js"],"names":["isIterateeCall","require","nativeCeil","Math","ceil","nativeMax","max","range","start","end","step","undefined","index","length","result","Array","module","exports"],"mappings":";;AAAA,IAAIA,iBAAiBC,QAAQ,4BAAR,CAArB;;AAEA;AACA,IAAIC,aAAaC,KAAKC,IAAtB;AAAA,IACIC,YAAYF,KAAKG,GADrB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAIA,QAAQV,eAAeQ,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,CAAZ,EAA8C;AAC5CD,UAAMC,OAAOC,SAAb;AACD;AACDH,UAAQ,CAACA,KAAD,IAAU,CAAlB;AACAE,SAAOA,QAAQ,IAAR,GAAe,CAAf,GAAoB,CAACA,IAAD,IAAS,CAApC;;AAEA,MAAID,OAAO,IAAX,EAAiB;AACfA,UAAMD,KAAN;AACAA,YAAQ,CAAR;AACD,GAHD,MAGO;AACLC,UAAM,CAACA,GAAD,IAAQ,CAAd;AACD;AACD;AACA;AACA,MAAIG,QAAQ,CAAC,CAAb;AAAA,MACIC,SAASR,UAAUH,WAAW,CAACO,MAAMD,KAAP,KAAiBE,QAAQ,CAAzB,CAAX,CAAV,EAAmD,CAAnD,CADb;AAAA,MAEII,SAASC,MAAMF,MAAN,CAFb;;AAIA,SAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvBC,WAAOF,KAAP,IAAgBJ,KAAhB;AACAA,aAASE,IAAT;AACD;AACD,SAAOI,MAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBV,KAAjB","file":"range.js","sourcesContent":["var isIterateeCall = require('../internal/isIterateeCall');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. If `end` is not specified it is\n * set to `start` with `start` then set to `0`. If `end` is less than `start`\n * a zero-length range is created unless a negative `step` is specified.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the new array of numbers.\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nfunction range(start, end, step) {\n  if (step && isIterateeCall(start, end, step)) {\n    end = step = undefined;\n  }\n  start = +start || 0;\n  step = step == null ? 1 : (+step || 0);\n\n  if (end == null) {\n    end = start;\n    start = 0;\n  } else {\n    end = +end || 0;\n  }\n  // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.\n  // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = start;\n    start += step;\n  }\n  return result;\n}\n\nmodule.exports = range;\n"]}