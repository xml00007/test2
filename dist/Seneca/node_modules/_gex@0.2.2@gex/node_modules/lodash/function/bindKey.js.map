{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/bindKey.js"],"names":["createWrapper","require","replaceHolders","restParam","BIND_FLAG","BIND_KEY_FLAG","PARTIAL_FLAG","bindKey","object","key","partials","bitmask","length","holders","placeholder","module","exports"],"mappings":";;AAAA,IAAIA,gBAAgBC,QAAQ,2BAAR,CAApB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;AAAA,IAEIE,YAAYF,QAAQ,aAAR,CAFhB;;AAIA;AACA,IAAIG,YAAY,CAAhB;AAAA,IACIC,gBAAgB,CADpB;AAAA,IAEIC,eAAe,EAFnB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,IAAIC,UAAUJ,UAAU,UAASK,MAAT,EAAiBC,GAAjB,EAAsBC,QAAtB,EAAgC;AACtD,MAAIC,UAAUP,YAAYC,aAA1B;AACA,MAAIK,SAASE,MAAb,EAAqB;AACnB,QAAIC,UAAUX,eAAeQ,QAAf,EAAyBH,QAAQO,WAAjC,CAAd;AACAH,eAAWL,YAAX;AACD;AACD,SAAON,cAAcS,GAAd,EAAmBE,OAAnB,EAA4BH,MAA5B,EAAoCE,QAApC,EAA8CG,OAA9C,CAAP;AACD,CAPa,CAAd;;AASA;AACAN,QAAQO,WAAR,GAAsB,EAAtB;;AAEAC,OAAOC,OAAP,GAAiBT,OAAjB","file":"bindKey.js","sourcesContent":["var createWrapper = require('../internal/createWrapper'),\n    replaceHolders = require('../internal/replaceHolders'),\n    restParam = require('./restParam');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes the method at `object[key]` and prepends\n * any additional `_.bindKey` arguments to those provided to the bound function.\n *\n * This method differs from `_.bind` by allowing bound functions to reference\n * methods that may be redefined or don't yet exist.\n * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n * for more details.\n *\n * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Object} object The object the method belongs to.\n * @param {string} key The key of the method.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * var object = {\n *   'user': 'fred',\n *   'greet': function(greeting, punctuation) {\n *     return greeting + ' ' + this.user + punctuation;\n *   }\n * };\n *\n * var bound = _.bindKey(object, 'greet', 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * object.greet = function(greeting, punctuation) {\n *   return greeting + 'ya ' + this.user + punctuation;\n * };\n *\n * bound('!');\n * // => 'hiya fred!'\n *\n * // using placeholders\n * var bound = _.bindKey(object, 'greet', _, '!');\n * bound('hi');\n * // => 'hiya fred!'\n */\nvar bindKey = restParam(function(object, key, partials) {\n  var bitmask = BIND_FLAG | BIND_KEY_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, bindKey.placeholder);\n    bitmask |= PARTIAL_FLAG;\n  }\n  return createWrapper(key, bitmask, object, partials, holders);\n});\n\n// Assign default placeholders.\nbindKey.placeholder = {};\n\nmodule.exports = bindKey;\n"]}