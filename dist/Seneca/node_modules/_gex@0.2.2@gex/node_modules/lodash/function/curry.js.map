{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/curry.js"],"names":["createCurry","require","CURRY_FLAG","curry","placeholder","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,yBAAR,CAAlB;;AAEA;AACA,IAAIC,aAAa,CAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,IAAIC,QAAQH,YAAYE,UAAZ,CAAZ;;AAEA;AACAC,MAAMC,WAAN,GAAoB,EAApB;;AAEAC,OAAOC,OAAP,GAAiBH,KAAjB","file":"curry.js","sourcesContent":["var createCurry = require('../internal/createCurry');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar CURRY_FLAG = 8;\n\n/**\n * Creates a function that accepts one or more arguments of `func` that when\n * called either invokes `func` returning its result, if all `func` arguments\n * have been provided, or returns a function that accepts one or more of the\n * remaining `func` arguments, and so on. The arity of `func` may be specified\n * if `func.length` is not sufficient.\n *\n * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n * may be used as a placeholder for provided arguments.\n *\n * **Note:** This method does not set the \"length\" property of curried functions.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to curry.\n * @param {number} [arity=func.length] The arity of `func`.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Function} Returns the new curried function.\n * @example\n *\n * var abc = function(a, b, c) {\n *   return [a, b, c];\n * };\n *\n * var curried = _.curry(abc);\n *\n * curried(1)(2)(3);\n * // => [1, 2, 3]\n *\n * curried(1, 2)(3);\n * // => [1, 2, 3]\n *\n * curried(1, 2, 3);\n * // => [1, 2, 3]\n *\n * // using placeholders\n * curried(1)(_, 3)(2);\n * // => [1, 2, 3]\n */\nvar curry = createCurry(CURRY_FLAG);\n\n// Assign default placeholders.\ncurry.placeholder = {};\n\nmodule.exports = curry;\n"]}