{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/memoize.js"],"names":["MapCache","require","FUNC_ERROR_TEXT","memoize","func","resolver","TypeError","memoized","args","arguments","key","apply","cache","has","get","result","set","Cache","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,sBAAR,CAAf;;AAEA;AACA,IAAIC,kBAAkB,qBAAtB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AAC/B,MAAI,OAAOD,IAAP,IAAe,UAAf,IAA8BC,YAAY,OAAOA,QAAP,IAAmB,UAAjE,EAA8E;AAC5E,UAAM,IAAIC,SAAJ,CAAcJ,eAAd,CAAN;AACD;AACD,MAAIK,WAAW,SAAXA,QAAW,GAAW;AACxB,QAAIC,OAAOC,SAAX;AAAA,QACIC,MAAML,WAAWA,SAASM,KAAT,CAAe,IAAf,EAAqBH,IAArB,CAAX,GAAwCA,KAAK,CAAL,CADlD;AAAA,QAEII,QAAQL,SAASK,KAFrB;;AAIA,QAAIA,MAAMC,GAAN,CAAUH,GAAV,CAAJ,EAAoB;AAClB,aAAOE,MAAME,GAAN,CAAUJ,GAAV,CAAP;AACD;AACD,QAAIK,SAASX,KAAKO,KAAL,CAAW,IAAX,EAAiBH,IAAjB,CAAb;AACAD,aAASK,KAAT,GAAiBA,MAAMI,GAAN,CAAUN,GAAV,EAAeK,MAAf,CAAjB;AACA,WAAOA,MAAP;AACD,GAXD;AAYAR,WAASK,KAAT,GAAiB,IAAIT,QAAQc,KAAZ,EAAjB;AACA,SAAOV,QAAP;AACD;;AAED;AACAJ,QAAQc,KAAR,GAAgBjB,QAAhB;;AAEAkB,OAAOC,OAAP,GAAiBhB,OAAjB","file":"memoize.js","sourcesContent":["var MapCache = require('../internal/MapCache');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is coerced to a string and used as the\n * cache key. The `func` is invoked with the `this` binding of the memoized\n * function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoizing function.\n * @example\n *\n * var upperCase = _.memoize(function(string) {\n *   return string.toUpperCase();\n * });\n *\n * upperCase('fred');\n * // => 'FRED'\n *\n * // modifying the result cache\n * upperCase.cache.set('fred', 'BARNEY');\n * upperCase('fred');\n * // => 'BARNEY'\n *\n * // replacing `_.memoize.Cache`\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'barney' };\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'fred' }\n *\n * _.memoize.Cache = WeakMap;\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'barney' }\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new memoize.Cache;\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n"]}