{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/throttle.js"],"names":["debounce","require","isObject","FUNC_ERROR_TEXT","throttle","func","wait","options","leading","trailing","TypeError","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,YAAR,CAAf;AAAA,IACIC,WAAWD,QAAQ,kBAAR,CADf;;AAGA;AACA,IAAIE,kBAAkB,qBAAtB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuC;AACrC,MAAIC,UAAU,IAAd;AAAA,MACIC,WAAW,IADf;;AAGA,MAAI,OAAOJ,IAAP,IAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAIK,SAAJ,CAAcP,eAAd,CAAN;AACD;AACD,MAAII,YAAY,KAAhB,EAAuB;AACrBC,cAAU,KAAV;AACD,GAFD,MAEO,IAAIN,SAASK,OAAT,CAAJ,EAAuB;AAC5BC,cAAU,aAAaD,OAAb,GAAuB,CAAC,CAACA,QAAQC,OAAjC,GAA2CA,OAArD;AACAC,eAAW,cAAcF,OAAd,GAAwB,CAAC,CAACA,QAAQE,QAAlC,GAA6CA,QAAxD;AACD;AACD,SAAOT,SAASK,IAAT,EAAeC,IAAf,EAAqB,EAAE,WAAWE,OAAb,EAAsB,WAAW,CAACF,IAAlC,EAAwC,YAAYG,QAApD,EAArB,CAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBR,QAAjB","file":"throttle.js","sourcesContent":["var debounce = require('./debounce'),\n    isObject = require('../lang/isObject');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed invocations. Provide an options object to indicate\n * that `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. Subsequent calls to the throttled function return the\n * result of the last `func` call.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked\n * on the trailing edge of the timeout only if the the throttled function is\n * invoked more than once during the `wait` timeout.\n *\n * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options] The options object.\n * @param {boolean} [options.leading=true] Specify invoking on the leading\n *  edge of the timeout.\n * @param {boolean} [options.trailing=true] Specify invoking on the trailing\n *  edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // avoid excessively updating the position while scrolling\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes\n * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {\n *   'trailing': false\n * }));\n *\n * // cancel a trailing throttled call\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (options === false) {\n    leading = false;\n  } else if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });\n}\n\nmodule.exports = throttle;\n"]}