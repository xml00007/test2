{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/after.js"],"names":["FUNC_ERROR_TEXT","nativeIsFinite","global","isFinite","after","n","func","temp","TypeError","apply","arguments","module","exports"],"mappings":";;AAAA;AACA,IAAIA,kBAAkB,qBAAtB;;AAEA;AACA,IAAIC,iBAAiBC,OAAOC,QAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,KAAT,CAAeC,CAAf,EAAkBC,IAAlB,EAAwB;AACtB,MAAI,OAAOA,IAAP,IAAe,UAAnB,EAA+B;AAC7B,QAAI,OAAOD,CAAP,IAAY,UAAhB,EAA4B;AAC1B,UAAIE,OAAOF,CAAX;AACAA,UAAIC,IAAJ;AACAA,aAAOC,IAAP;AACD,KAJD,MAIO;AACL,YAAM,IAAIC,SAAJ,CAAcR,eAAd,CAAN;AACD;AACF;AACDK,MAAIJ,eAAeI,IAAI,CAACA,CAApB,IAAyBA,CAAzB,GAA6B,CAAjC;AACA,SAAO,YAAW;AAChB,QAAI,EAAEA,CAAF,GAAM,CAAV,EAAa;AACX,aAAOC,KAAKG,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD;AACF,GAJD;AAKD;;AAEDC,OAAOC,OAAP,GAAiBR,KAAjB","file":"after.js","sourcesContent":["/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = global.isFinite;\n\n/**\n * The opposite of `_.before`; this method creates a function that invokes\n * `func` once it is called `n` or more times.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {number} n The number of calls before `func` is invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * var saves = ['profile', 'settings'];\n *\n * var done = _.after(saves.length, function() {\n *   console.log('done saving!');\n * });\n *\n * _.forEach(saves, function(type) {\n *   asyncSave({ 'type': type, 'complete': done });\n * });\n * // => logs 'done saving!' after the two async saves have completed\n */\nfunction after(n, func) {\n  if (typeof func != 'function') {\n    if (typeof n == 'function') {\n      var temp = n;\n      n = func;\n      func = temp;\n    } else {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n  }\n  n = nativeIsFinite(n = +n) ? n : 0;\n  return function() {\n    if (--n < 1) {\n      return func.apply(this, arguments);\n    }\n  };\n}\n\nmodule.exports = after;\n"]}