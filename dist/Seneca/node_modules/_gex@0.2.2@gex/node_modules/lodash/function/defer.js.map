{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/defer.js"],"names":["baseDelay","require","restParam","defer","func","args","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,uBAAR,CAAhB;AAAA,IACIC,YAAYD,QAAQ,aAAR,CADhB;;AAGA;;;;;;;;;;;;;;;;;AAiBA,IAAIE,QAAQD,UAAU,UAASE,IAAT,EAAeC,IAAf,EAAqB;AACzC,SAAOL,UAAUI,IAAV,EAAgB,CAAhB,EAAmBC,IAAnB,CAAP;AACD,CAFW,CAAZ;;AAIAC,OAAOC,OAAP,GAAiBJ,KAAjB","file":"defer.js","sourcesContent":["var baseDelay = require('../internal/baseDelay'),\n    restParam = require('./restParam');\n\n/**\n * Defers invoking the `func` until the current call stack has cleared. Any\n * additional arguments are provided to `func` when it is invoked.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to defer.\n * @param {...*} [args] The arguments to invoke the function with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * _.defer(function(text) {\n *   console.log(text);\n * }, 'deferred');\n * // logs 'deferred' after one or more milliseconds\n */\nvar defer = restParam(function(func, args) {\n  return baseDelay(func, 1, args);\n});\n\nmodule.exports = defer;\n"]}