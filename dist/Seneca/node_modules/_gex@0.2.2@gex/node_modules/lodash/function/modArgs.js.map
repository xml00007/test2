{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/function/modArgs.js"],"names":["arrayEvery","require","baseFlatten","baseIsFunction","restParam","FUNC_ERROR_TEXT","nativeMin","Math","min","modArgs","func","transforms","TypeError","length","args","index","apply","module","exports"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,wBAAR,CAAjB;AAAA,IACIC,cAAcD,QAAQ,yBAAR,CADlB;AAAA,IAEIE,iBAAiBF,QAAQ,4BAAR,CAFrB;AAAA,IAGIG,YAAYH,QAAQ,aAAR,CAHhB;;AAKA;AACA,IAAII,kBAAkB,qBAAtB;;AAEA;AACA,IAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAIC,UAAUL,UAAU,UAASM,IAAT,EAAeC,UAAf,EAA2B;AACjDA,eAAaT,YAAYS,UAAZ,CAAb;AACA,MAAI,OAAOD,IAAP,IAAe,UAAf,IAA6B,CAACV,WAAWW,UAAX,EAAuBR,cAAvB,CAAlC,EAA0E;AACxE,UAAM,IAAIS,SAAJ,CAAcP,eAAd,CAAN;AACD;AACD,MAAIQ,SAASF,WAAWE,MAAxB;AACA,SAAOT,UAAU,UAASU,IAAT,EAAe;AAC9B,QAAIC,QAAQT,UAAUQ,KAAKD,MAAf,EAAuBA,MAAvB,CAAZ;AACA,WAAOE,OAAP,EAAgB;AACdD,WAAKC,KAAL,IAAcJ,WAAWI,KAAX,EAAkBD,KAAKC,KAAL,CAAlB,CAAd;AACD;AACD,WAAOL,KAAKM,KAAL,CAAW,IAAX,EAAiBF,IAAjB,CAAP;AACD,GANM,CAAP;AAOD,CAba,CAAd;;AAeAG,OAAOC,OAAP,GAAiBT,OAAjB","file":"modArgs.js","sourcesContent":["var arrayEvery = require('../internal/arrayEvery'),\n    baseFlatten = require('../internal/baseFlatten'),\n    baseIsFunction = require('../internal/baseIsFunction'),\n    restParam = require('./restParam');\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Creates a function that runs each argument through a corresponding\n * transform function.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {...(Function|Function[])} [transforms] The functions to transform\n * arguments, specified as individual functions or arrays of functions.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2;\n * }\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var modded = _.modArgs(function(x, y) {\n *   return [x, y];\n * }, square, doubled);\n *\n * modded(1, 2);\n * // => [1, 4]\n *\n * modded(5, 10);\n * // => [25, 20]\n */\nvar modArgs = restParam(function(func, transforms) {\n  transforms = baseFlatten(transforms);\n  if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = transforms.length;\n  return restParam(function(args) {\n    var index = nativeMin(args.length, length);\n    while (index--) {\n      args[index] = transforms[index](args[index]);\n    }\n    return func.apply(this, args);\n  });\n});\n\nmodule.exports = modArgs;\n"]}