{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/math/sum.js"],"names":["arraySum","require","baseCallback","baseSum","isArray","isIterateeCall","toIterable","sum","collection","iteratee","thisArg","undefined","length","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,sBAAR,CAAf;AAAA,IACIC,eAAeD,QAAQ,0BAAR,CADnB;AAAA,IAEIE,UAAUF,QAAQ,qBAAR,CAFd;AAAA,IAGIG,UAAUH,QAAQ,iBAAR,CAHd;AAAA,IAIII,iBAAiBJ,QAAQ,4BAAR,CAJrB;AAAA,IAKIK,aAAaL,QAAQ,wBAAR,CALjB;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAASM,GAAT,CAAaC,UAAb,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4C;AAC1C,MAAIA,WAAWL,eAAeG,UAAf,EAA2BC,QAA3B,EAAqCC,OAArC,CAAf,EAA8D;AAC5DD,eAAWE,SAAX;AACD;AACDF,aAAWP,aAAaO,QAAb,EAAuBC,OAAvB,EAAgC,CAAhC,CAAX;AACA,SAAOD,SAASG,MAAT,IAAmB,CAAnB,GACHZ,SAASI,QAAQI,UAAR,IAAsBA,UAAtB,GAAmCF,WAAWE,UAAX,CAA5C,EAAoEC,QAApE,CADG,GAEHN,QAAQK,UAAR,EAAoBC,QAApB,CAFJ;AAGD;;AAEDI,OAAOC,OAAP,GAAiBP,GAAjB","file":"sum.js","sourcesContent":["var arraySum = require('../internal/arraySum'),\n    baseCallback = require('../internal/baseCallback'),\n    baseSum = require('../internal/baseSum'),\n    isArray = require('../lang/isArray'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    toIterable = require('../internal/toIterable');\n\n/**\n * Gets the sum of the values in `collection`.\n *\n * @static\n * @memberOf _\n * @category Math\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 6]);\n * // => 10\n *\n * _.sum({ 'a': 4, 'b': 6 });\n * // => 10\n *\n * var objects = [\n *   { 'n': 4 },\n *   { 'n': 6 }\n * ];\n *\n * _.sum(objects, function(object) {\n *   return object.n;\n * });\n * // => 10\n *\n * // using the `_.property` callback shorthand\n * _.sum(objects, 'n');\n * // => 10\n */\nfunction sum(collection, iteratee, thisArg) {\n  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n    iteratee = undefined;\n  }\n  iteratee = baseCallback(iteratee, thisArg, 3);\n  return iteratee.length == 1\n    ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)\n    : baseSum(collection, iteratee);\n}\n\nmodule.exports = sum;\n"]}