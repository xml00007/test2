{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/array/remove.js"],"names":["baseCallback","require","basePullAt","remove","array","predicate","thisArg","result","length","index","indexes","value","push","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACIC,aAAaD,QAAQ,wBAAR,CADjB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAASE,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2C;AACzC,MAAIC,SAAS,EAAb;AACA,MAAI,EAAEH,SAASA,MAAMI,MAAjB,CAAJ,EAA8B;AAC5B,WAAOD,MAAP;AACD;AACD,MAAIE,QAAQ,CAAC,CAAb;AAAA,MACIC,UAAU,EADd;AAAA,MAEIF,SAASJ,MAAMI,MAFnB;;AAIAH,cAAYL,aAAaK,SAAb,EAAwBC,OAAxB,EAAiC,CAAjC,CAAZ;AACA,SAAO,EAAEG,KAAF,GAAUD,MAAjB,EAAyB;AACvB,QAAIG,QAAQP,MAAMK,KAAN,CAAZ;AACA,QAAIJ,UAAUM,KAAV,EAAiBF,KAAjB,EAAwBL,KAAxB,CAAJ,EAAoC;AAClCG,aAAOK,IAAP,CAAYD,KAAZ;AACAD,cAAQE,IAAR,CAAaH,KAAb;AACD;AACF;AACDP,aAAWE,KAAX,EAAkBM,OAAlB;AACA,SAAOH,MAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBX,MAAjB","file":"remove.js","sourcesContent":["var baseCallback = require('../internal/baseCallback'),\n    basePullAt = require('../internal/basePullAt');\n\n/**\n * Removes all elements from `array` that `predicate` returns truthy for\n * and returns an array of the removed elements. The predicate is bound to\n * `thisArg` and invoked with three arguments: (value, index, array).\n *\n * If a property name is provided for `predicate` the created `_.property`\n * style callback returns the property value of the given element.\n *\n * If a value is also provided for `thisArg` the created `_.matchesProperty`\n * style callback returns `true` for elements that have a matching property\n * value, else `false`.\n *\n * If an object is provided for `predicate` the created `_.matches` style\n * callback returns `true` for elements that have the properties of the given\n * object, else `false`.\n *\n * **Note:** Unlike `_.filter`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Function|Object|string} [predicate=_.identity] The function invoked\n *  per iteration.\n * @param {*} [thisArg] The `this` binding of `predicate`.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = [1, 2, 3, 4];\n * var evens = _.remove(array, function(n) {\n *   return n % 2 == 0;\n * });\n *\n * console.log(array);\n * // => [1, 3]\n *\n * console.log(evens);\n * // => [2, 4]\n */\nfunction remove(array, predicate, thisArg) {\n  var result = [];\n  if (!(array && array.length)) {\n    return result;\n  }\n  var index = -1,\n      indexes = [],\n      length = array.length;\n\n  predicate = baseCallback(predicate, thisArg, 3);\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result.push(value);\n      indexes.push(index);\n    }\n  }\n  basePullAt(array, indexes);\n  return result;\n}\n\nmodule.exports = remove;\n"]}