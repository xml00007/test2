{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/array/slice.js"],"names":["baseSlice","require","isIterateeCall","slice","array","start","end","length","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,uBAAR,CAAhB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;;AAGA;;;;;;;;;;;;;;AAcA,SAASE,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;AAChC,MAAIC,SAASH,QAAQA,MAAMG,MAAd,GAAuB,CAApC;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAID,OAAO,OAAOA,GAAP,IAAc,QAArB,IAAiCJ,eAAeE,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,CAArC,EAAwE;AACtED,YAAQ,CAAR;AACAC,UAAMC,MAAN;AACD;AACD,SAAOP,UAAUI,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,CAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBN,KAAjB","file":"slice.js","sourcesContent":["var baseSlice = require('../internal/baseSlice'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of `Array#slice` to support node\n * lists in IE < 9 and to ensure dense arrays are returned.\n *\n * @static\n * @memberOf _\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array ? array.length : 0;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"]}