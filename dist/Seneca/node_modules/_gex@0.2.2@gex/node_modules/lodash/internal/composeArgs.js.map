{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/composeArgs.js"],"names":["nativeMax","Math","max","composeArgs","args","partials","holders","holdersLength","length","argsIndex","argsLength","leftIndex","leftLength","result","Array","module","exports"],"mappings":";;AAAA;AACA,IAAIA,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;AAUA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8C;AAC5C,MAAIC,gBAAgBD,QAAQE,MAA5B;AAAA,MACIC,YAAY,CAAC,CADjB;AAAA,MAEIC,aAAaV,UAAUI,KAAKI,MAAL,GAAcD,aAAxB,EAAuC,CAAvC,CAFjB;AAAA,MAGII,YAAY,CAAC,CAHjB;AAAA,MAIIC,aAAaP,SAASG,MAJ1B;AAAA,MAKIK,SAASC,MAAMF,aAAaF,UAAnB,CALb;;AAOA,SAAO,EAAEC,SAAF,GAAcC,UAArB,EAAiC;AAC/BC,WAAOF,SAAP,IAAoBN,SAASM,SAAT,CAApB;AACD;AACD,SAAO,EAAEF,SAAF,GAAcF,aAArB,EAAoC;AAClCM,WAAOP,QAAQG,SAAR,CAAP,IAA6BL,KAAKK,SAAL,CAA7B;AACD;AACD,SAAOC,YAAP,EAAqB;AACnBG,WAAOF,WAAP,IAAsBP,KAAKK,WAAL,CAAtB;AACD;AACD,SAAOI,MAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBb,WAAjB","file":"composeArgs.js","sourcesContent":["/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array|Object} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders) {\n  var holdersLength = holders.length,\n      argsIndex = -1,\n      argsLength = nativeMax(args.length - holdersLength, 0),\n      leftIndex = -1,\n      leftLength = partials.length,\n      result = Array(leftLength + argsLength);\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    result[holders[argsIndex]] = args[argsIndex];\n  }\n  while (argsLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"]}