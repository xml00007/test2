{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseFlatten.js"],"names":["arrayPush","require","isArguments","isArray","isArrayLike","isObjectLike","baseFlatten","array","isDeep","isStrict","result","index","length","value","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;AAAA,IACIC,cAAcD,QAAQ,qBAAR,CADlB;AAAA,IAEIE,UAAUF,QAAQ,iBAAR,CAFd;AAAA,IAGIG,cAAcH,QAAQ,eAAR,CAHlB;AAAA,IAIII,eAAeJ,QAAQ,gBAAR,CAJnB;;AAMA;;;;;;;;;;;AAWA,SAASK,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsD;AACpDA,aAAWA,SAAS,EAApB;;AAEA,MAAIC,QAAQ,CAAC,CAAb;AAAA,MACIC,SAASL,MAAMK,MADnB;;AAGA,SAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAIC,QAAQN,MAAMI,KAAN,CAAZ;AACA,QAAIN,aAAaQ,KAAb,KAAuBT,YAAYS,KAAZ,CAAvB,KACCJ,YAAYN,QAAQU,KAAR,CAAZ,IAA8BX,YAAYW,KAAZ,CAD/B,CAAJ,EACwD;AACtD,UAAIL,MAAJ,EAAY;AACV;AACAF,oBAAYO,KAAZ,EAAmBL,MAAnB,EAA2BC,QAA3B,EAAqCC,MAArC;AACD,OAHD,MAGO;AACLV,kBAAUU,MAAV,EAAkBG,KAAlB;AACD;AACF,KARD,MAQO,IAAI,CAACJ,QAAL,EAAe;AACpBC,aAAOA,OAAOE,MAAd,IAAwBC,KAAxB;AACD;AACF;AACD,SAAOH,MAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiBT,WAAjB","file":"baseFlatten.js","sourcesContent":["var arrayPush = require('./arrayPush'),\n    isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.flatten` with added support for restricting\n * flattening and specifying the start index.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {boolean} [isDeep] Specify a deep flatten.\n * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, isDeep, isStrict, result) {\n  result || (result = []);\n\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    if (isObjectLike(value) && isArrayLike(value) &&\n        (isStrict || isArray(value) || isArguments(value))) {\n      if (isDeep) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, isDeep, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n"]}