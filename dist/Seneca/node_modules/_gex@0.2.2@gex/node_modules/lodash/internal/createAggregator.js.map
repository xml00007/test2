{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/createAggregator.js"],"names":["baseCallback","require","baseEach","isArray","createAggregator","setter","initializer","collection","iteratee","thisArg","result","index","length","value","key","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,gBAAR,CAAnB;AAAA,IACIC,WAAWD,QAAQ,YAAR,CADf;AAAA,IAEIE,UAAUF,QAAQ,iBAAR,CAFd;;AAIA;;;;;;;;AAQA,SAASG,gBAAT,CAA0BC,MAA1B,EAAkCC,WAAlC,EAA+C;AAC7C,SAAO,UAASC,UAAT,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AAC7C,QAAIC,SAASJ,cAAcA,aAAd,GAA8B,EAA3C;AACAE,eAAWR,aAAaQ,QAAb,EAAuBC,OAAvB,EAAgC,CAAhC,CAAX;;AAEA,QAAIN,QAAQI,UAAR,CAAJ,EAAyB;AACvB,UAAII,QAAQ,CAAC,CAAb;AAAA,UACIC,SAASL,WAAWK,MADxB;;AAGA,aAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvB,YAAIC,QAAQN,WAAWI,KAAX,CAAZ;AACAN,eAAOK,MAAP,EAAeG,KAAf,EAAsBL,SAASK,KAAT,EAAgBF,KAAhB,EAAuBJ,UAAvB,CAAtB,EAA0DA,UAA1D;AACD;AACF,KARD,MAQO;AACLL,eAASK,UAAT,EAAqB,UAASM,KAAT,EAAgBC,GAAhB,EAAqBP,UAArB,EAAiC;AACpDF,eAAOK,MAAP,EAAeG,KAAf,EAAsBL,SAASK,KAAT,EAAgBC,GAAhB,EAAqBP,UAArB,CAAtB,EAAwDA,UAAxD;AACD,OAFD;AAGD;AACD,WAAOG,MAAP;AACD,GAlBD;AAmBD;;AAEDK,OAAOC,OAAP,GAAiBZ,gBAAjB","file":"createAggregator.js","sourcesContent":["var baseCallback = require('./baseCallback'),\n    baseEach = require('./baseEach'),\n    isArray = require('../lang/isArray');\n\n/**\n * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.\n *\n * @private\n * @param {Function} setter The function to set keys and values of the accumulator object.\n * @param {Function} [initializer] The function to initialize the accumulator object.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee, thisArg) {\n    var result = initializer ? initializer() : {};\n    iteratee = baseCallback(iteratee, thisArg, 3);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        setter(result, value, iteratee(value, index, collection), collection);\n      }\n    } else {\n      baseEach(collection, function(value, key, collection) {\n        setter(result, value, iteratee(value, key, collection), collection);\n      });\n    }\n    return result;\n  };\n}\n\nmodule.exports = createAggregator;\n"]}