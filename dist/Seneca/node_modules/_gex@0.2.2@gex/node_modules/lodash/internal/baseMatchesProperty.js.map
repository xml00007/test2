{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/baseMatchesProperty.js"],"names":["baseGet","require","baseIsEqual","baseSlice","isArray","isKey","isStrictComparable","last","toObject","toPath","baseMatchesProperty","path","srcValue","isArr","isCommon","pathKey","object","key","length","undefined","module","exports"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,WAAR,CAAd;AAAA,IACIC,cAAcD,QAAQ,eAAR,CADlB;AAAA,IAEIE,YAAYF,QAAQ,aAAR,CAFhB;AAAA,IAGIG,UAAUH,QAAQ,iBAAR,CAHd;AAAA,IAIII,QAAQJ,QAAQ,SAAR,CAJZ;AAAA,IAKIK,qBAAqBL,QAAQ,sBAAR,CALzB;AAAA,IAMIM,OAAON,QAAQ,eAAR,CANX;AAAA,IAOIO,WAAWP,QAAQ,YAAR,CAPf;AAAA,IAQIQ,SAASR,QAAQ,UAAR,CARb;;AAUA;;;;;;;;AAQA,SAASS,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIC,QAAQT,QAAQO,IAAR,CAAZ;AAAA,MACIG,WAAWT,MAAMM,IAAN,KAAeL,mBAAmBM,QAAnB,CAD9B;AAAA,MAEIG,UAAWJ,OAAO,EAFtB;;AAIAA,SAAOF,OAAOE,IAAP,CAAP;AACA,SAAO,UAASK,MAAT,EAAiB;AACtB,QAAIA,UAAU,IAAd,EAAoB;AAClB,aAAO,KAAP;AACD;AACD,QAAIC,MAAMF,OAAV;AACAC,aAASR,SAASQ,MAAT,CAAT;AACA,QAAI,CAACH,SAAS,CAACC,QAAX,KAAwB,EAAEG,OAAOD,MAAT,CAA5B,EAA8C;AAC5CA,eAASL,KAAKO,MAAL,IAAe,CAAf,GAAmBF,MAAnB,GAA4BhB,QAAQgB,MAAR,EAAgBb,UAAUQ,IAAV,EAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAhB,CAArC;AACA,UAAIK,UAAU,IAAd,EAAoB;AAClB,eAAO,KAAP;AACD;AACDC,YAAMV,KAAKI,IAAL,CAAN;AACAK,eAASR,SAASQ,MAAT,CAAT;AACD;AACD,WAAOA,OAAOC,GAAP,MAAgBL,QAAhB,GACFA,aAAaO,SAAb,IAA2BF,OAAOD,MADhC,GAEHd,YAAYU,QAAZ,EAAsBI,OAAOC,GAAP,CAAtB,EAAmCE,SAAnC,EAA8C,IAA9C,CAFJ;AAGD,GAjBD;AAkBD;;AAEDC,OAAOC,OAAP,GAAiBX,mBAAjB","file":"baseMatchesProperty.js","sourcesContent":["var baseGet = require('./baseGet'),\n    baseIsEqual = require('./baseIsEqual'),\n    baseSlice = require('./baseSlice'),\n    isArray = require('../lang/isArray'),\n    isKey = require('./isKey'),\n    isStrictComparable = require('./isStrictComparable'),\n    last = require('../array/last'),\n    toObject = require('./toObject'),\n    toPath = require('./toPath');\n\n/**\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to compare.\n * @returns {Function} Returns the new function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  var isArr = isArray(path),\n      isCommon = isKey(path) && isStrictComparable(srcValue),\n      pathKey = (path + '');\n\n  path = toPath(path);\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    var key = pathKey;\n    object = toObject(object);\n    if ((isArr || !isCommon) && !(key in object)) {\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n      if (object == null) {\n        return false;\n      }\n      key = last(path);\n      object = toObject(object);\n    }\n    return object[key] === srcValue\n      ? (srcValue !== undefined || (key in object))\n      : baseIsEqual(srcValue, object[key], undefined, true);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]}