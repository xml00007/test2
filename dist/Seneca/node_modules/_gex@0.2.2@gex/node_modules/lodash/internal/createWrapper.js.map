{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/createWrapper.js"],"names":["baseSetData","require","createBindWrapper","createHybridWrapper","createPartialWrapper","getData","mergeData","setData","BIND_FLAG","BIND_KEY_FLAG","PARTIAL_FLAG","PARTIAL_RIGHT_FLAG","FUNC_ERROR_TEXT","nativeMax","Math","max","createWrapper","func","bitmask","thisArg","partials","holders","argPos","ary","arity","isBindKey","TypeError","length","undefined","partialsRight","holdersRight","data","newData","result","apply","setter","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,eAAR,CAAlB;AAAA,IACIC,oBAAoBD,QAAQ,qBAAR,CADxB;AAAA,IAEIE,sBAAsBF,QAAQ,uBAAR,CAF1B;AAAA,IAGIG,uBAAuBH,QAAQ,wBAAR,CAH3B;AAAA,IAIII,UAAUJ,QAAQ,WAAR,CAJd;AAAA,IAKIK,YAAYL,QAAQ,aAAR,CALhB;AAAA,IAMIM,UAAUN,QAAQ,WAAR,CANd;;AAQA;AACA,IAAIO,YAAY,CAAhB;AAAA,IACIC,gBAAgB,CADpB;AAAA,IAEIC,eAAe,EAFnB;AAAA,IAGIC,qBAAqB,EAHzB;;AAKA;AACA,IAAIC,kBAAkB,qBAAtB;;AAEA;AACA,IAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyDC,OAAzD,EAAkEC,MAAlE,EAA0EC,GAA1E,EAA+EC,KAA/E,EAAsF;AACpF,MAAIC,YAAYP,UAAUT,aAA1B;AACA,MAAI,CAACgB,SAAD,IAAc,OAAOR,IAAP,IAAe,UAAjC,EAA6C;AAC3C,UAAM,IAAIS,SAAJ,CAAcd,eAAd,CAAN;AACD;AACD,MAAIe,SAASP,WAAWA,SAASO,MAApB,GAA6B,CAA1C;AACA,MAAI,CAACA,MAAL,EAAa;AACXT,eAAW,EAAER,eAAeC,kBAAjB,CAAX;AACAS,eAAWC,UAAUO,SAArB;AACD;AACDD,YAAWN,UAAUA,QAAQM,MAAlB,GAA2B,CAAtC;AACA,MAAIT,UAAUP,kBAAd,EAAkC;AAChC,QAAIkB,gBAAgBT,QAApB;AAAA,QACIU,eAAeT,OADnB;;AAGAD,eAAWC,UAAUO,SAArB;AACD;AACD,MAAIG,OAAON,YAAYG,SAAZ,GAAwBvB,QAAQY,IAAR,CAAnC;AAAA,MACIe,UAAU,CAACf,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4CQ,aAA5C,EAA2DC,YAA3D,EAAyER,MAAzE,EAAiFC,GAAjF,EAAsFC,KAAtF,CADd;;AAGA,MAAIO,IAAJ,EAAU;AACRzB,cAAU0B,OAAV,EAAmBD,IAAnB;AACAb,cAAUc,QAAQ,CAAR,CAAV;AACAR,YAAQQ,QAAQ,CAAR,CAAR;AACD;AACDA,UAAQ,CAAR,IAAaR,SAAS,IAAT,GACRC,YAAY,CAAZ,GAAgBR,KAAKU,MADb,GAERd,UAAUW,QAAQG,MAAlB,EAA0B,CAA1B,KAAgC,CAFrC;;AAIA,MAAIT,WAAWV,SAAf,EAA0B;AACxB,QAAIyB,SAAS/B,kBAAkB8B,QAAQ,CAAR,CAAlB,EAA8BA,QAAQ,CAAR,CAA9B,CAAb;AACD,GAFD,MAEO,IAAI,CAACd,WAAWR,YAAX,IAA2BQ,YAAYV,YAAYE,YAAxB,CAA5B,KAAsE,CAACsB,QAAQ,CAAR,EAAWL,MAAtF,EAA8F;AACnGM,aAAS7B,qBAAqB8B,KAArB,CAA2BN,SAA3B,EAAsCI,OAAtC,CAAT;AACD,GAFM,MAEA;AACLC,aAAS9B,oBAAoB+B,KAApB,CAA0BN,SAA1B,EAAqCI,OAArC,CAAT;AACD;AACD,MAAIG,SAASJ,OAAO/B,WAAP,GAAqBO,OAAlC;AACA,SAAO4B,OAAOF,MAAP,EAAeD,OAAf,CAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiBrB,aAAjB","file":"createWrapper.js","sourcesContent":["var baseSetData = require('./baseSetData'),\n    createBindWrapper = require('./createBindWrapper'),\n    createHybridWrapper = require('./createHybridWrapper'),\n    createPartialWrapper = require('./createPartialWrapper'),\n    getData = require('./getData'),\n    mergeData = require('./mergeData'),\n    setData = require('./setData');\n\n/** Used to compose bitmasks for wrapper metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    PARTIAL_FLAG = 32,\n    PARTIAL_RIGHT_FLAG = 64;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to reference.\n * @param {number} bitmask The bitmask of flags.\n *  The bitmask may be composed of the following flags:\n *     1 - `_.bind`\n *     2 - `_.bindKey`\n *     4 - `_.curry` or `_.curryRight` of a bound function\n *     8 - `_.curry`\n *    16 - `_.curryRight`\n *    32 - `_.partial`\n *    64 - `_.partialRight`\n *   128 - `_.rearg`\n *   256 - `_.ary`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  length -= (holders ? holders.length : 0);\n  if (bitmask & PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func),\n      newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n  if (data) {\n    mergeData(newData, data);\n    bitmask = newData[1];\n    arity = newData[9];\n  }\n  newData[9] = arity == null\n    ? (isBindKey ? 0 : func.length)\n    : (nativeMax(arity - length, 0) || 0);\n\n  if (bitmask == BIND_FLAG) {\n    var result = createBindWrapper(newData[0], newData[2]);\n  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {\n    result = createPartialWrapper.apply(undefined, newData);\n  } else {\n    result = createHybridWrapper.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setter(result, newData);\n}\n\nmodule.exports = createWrapper;\n"]}