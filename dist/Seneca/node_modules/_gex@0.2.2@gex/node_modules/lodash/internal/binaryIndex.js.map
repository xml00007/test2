{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/binaryIndex.js"],"names":["binaryIndexBy","require","identity","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","binaryIndex","array","value","retHighest","low","high","length","mid","computed","module","exports"],"mappings":";;AAAA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;AAAA,IACIC,WAAWD,QAAQ,qBAAR,CADf;;AAGA;AACA,IAAIE,mBAAmB,UAAvB;AAAA,IACIC,wBAAwBD,qBAAqB,CADjD;;AAGA;;;;;;;;;;;AAWA,SAASE,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,MAAM,CAAV;AAAA,MACIC,OAAOJ,QAAQA,MAAMK,MAAd,GAAuBF,GADlC;;AAGA,MAAI,OAAOF,KAAP,IAAgB,QAAhB,IAA4BA,UAAUA,KAAtC,IAA+CG,QAAQN,qBAA3D,EAAkF;AAChF,WAAOK,MAAMC,IAAb,EAAmB;AACjB,UAAIE,MAAOH,MAAMC,IAAP,KAAiB,CAA3B;AAAA,UACIG,WAAWP,MAAMM,GAAN,CADf;;AAGA,UAAI,CAACJ,aAAcK,YAAYN,KAA1B,GAAoCM,WAAWN,KAAhD,KAA2DM,aAAa,IAA5E,EAAkF;AAChFJ,cAAMG,MAAM,CAAZ;AACD,OAFD,MAEO;AACLF,eAAOE,GAAP;AACD;AACF;AACD,WAAOF,IAAP;AACD;AACD,SAAOV,cAAcM,KAAd,EAAqBC,KAArB,EAA4BL,QAA5B,EAAsCM,UAAtC,CAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBV,WAAjB","file":"binaryIndex.js","sourcesContent":["var binaryIndexBy = require('./binaryIndexBy'),\n    identity = require('../utility/identity');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * Performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction binaryIndex(array, value, retHighest) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return binaryIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = binaryIndex;\n"]}