{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/equalArrays.js"],"names":["arraySome","require","equalArrays","array","other","equalFunc","customizer","isLoose","stackA","stackB","index","arrLength","length","othLength","arrValue","othValue","result","undefined","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;;AAEA;;;;;;;;;;;;;;AAcA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,UAA9C,EAA0DC,OAA1D,EAAmEC,MAAnE,EAA2EC,MAA3E,EAAmF;AACjF,MAAIC,QAAQ,CAAC,CAAb;AAAA,MACIC,YAAYR,MAAMS,MADtB;AAAA,MAEIC,YAAYT,MAAMQ,MAFtB;;AAIA,MAAID,aAAaE,SAAb,IAA0B,EAAEN,WAAWM,YAAYF,SAAzB,CAA9B,EAAmE;AACjE,WAAO,KAAP;AACD;AACD;AACA,SAAO,EAAED,KAAF,GAAUC,SAAjB,EAA4B;AAC1B,QAAIG,WAAWX,MAAMO,KAAN,CAAf;AAAA,QACIK,WAAWX,MAAMM,KAAN,CADf;AAAA,QAEIM,SAASV,aAAaA,WAAWC,UAAUQ,QAAV,GAAqBD,QAAhC,EAA0CP,UAAUO,QAAV,GAAqBC,QAA/D,EAAyEL,KAAzE,CAAb,GAA+FO,SAF5G;;AAIA,QAAID,WAAWC,SAAf,EAA0B;AACxB,UAAID,MAAJ,EAAY;AACV;AACD;AACD,aAAO,KAAP;AACD;AACD;AACA,QAAIT,OAAJ,EAAa;AACX,UAAI,CAACP,UAAUI,KAAV,EAAiB,UAASW,QAAT,EAAmB;AACnC,eAAOD,aAAaC,QAAb,IAAyBV,UAAUS,QAAV,EAAoBC,QAApB,EAA8BT,UAA9B,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2DC,MAA3D,CAAhC;AACD,OAFA,CAAL,EAEQ;AACN,eAAO,KAAP;AACD;AACF,KAND,MAMO,IAAI,EAAEK,aAAaC,QAAb,IAAyBV,UAAUS,QAAV,EAAoBC,QAApB,EAA8BT,UAA9B,EAA0CC,OAA1C,EAAmDC,MAAnD,EAA2DC,MAA3D,CAA3B,CAAJ,EAAoG;AACzG,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBjB,WAAjB","file":"equalArrays.js","sourcesContent":["var arraySome = require('./arraySome');\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  }\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index],\n        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n    if (result !== undefined) {\n      if (result) {\n        continue;\n      }\n      return false;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (isLoose) {\n      if (!arraySome(other, function(othValue) {\n            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n          })) {\n        return false;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = equalArrays;\n"]}