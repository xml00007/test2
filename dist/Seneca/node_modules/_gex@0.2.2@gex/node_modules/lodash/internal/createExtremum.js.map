{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/internal/createExtremum.js"],"names":["arrayExtremum","require","baseCallback","baseExtremum","isArray","isIterateeCall","toIterable","createExtremum","comparator","exValue","collection","iteratee","thisArg","undefined","length","result","module","exports"],"mappings":";;AAAA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;AAAA,IACIC,eAAeD,QAAQ,gBAAR,CADnB;AAAA,IAEIE,eAAeF,QAAQ,gBAAR,CAFnB;AAAA,IAGIG,UAAUH,QAAQ,iBAAR,CAHd;AAAA,IAIII,iBAAiBJ,QAAQ,kBAAR,CAJrB;AAAA,IAKIK,aAAaL,QAAQ,cAAR,CALjB;;AAOA;;;;;;;;AAQA,SAASM,cAAT,CAAwBC,UAAxB,EAAoCC,OAApC,EAA6C;AAC3C,SAAO,UAASC,UAAT,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AAC7C,QAAIA,WAAWP,eAAeK,UAAf,EAA2BC,QAA3B,EAAqCC,OAArC,CAAf,EAA8D;AAC5DD,iBAAWE,SAAX;AACD;AACDF,eAAWT,aAAaS,QAAb,EAAuBC,OAAvB,EAAgC,CAAhC,CAAX;AACA,QAAID,SAASG,MAAT,IAAmB,CAAvB,EAA0B;AACxBJ,mBAAaN,QAAQM,UAAR,IAAsBA,UAAtB,GAAmCJ,WAAWI,UAAX,CAAhD;AACA,UAAIK,SAASf,cAAcU,UAAd,EAA0BC,QAA1B,EAAoCH,UAApC,EAAgDC,OAAhD,CAAb;AACA,UAAI,EAAEC,WAAWI,MAAX,IAAqBC,WAAWN,OAAlC,CAAJ,EAAgD;AAC9C,eAAOM,MAAP;AACD;AACF;AACD,WAAOZ,aAAaO,UAAb,EAAyBC,QAAzB,EAAmCH,UAAnC,EAA+CC,OAA/C,CAAP;AACD,GAbD;AAcD;;AAEDO,OAAOC,OAAP,GAAiBV,cAAjB","file":"createExtremum.js","sourcesContent":["var arrayExtremum = require('./arrayExtremum'),\n    baseCallback = require('./baseCallback'),\n    baseExtremum = require('./baseExtremum'),\n    isArray = require('../lang/isArray'),\n    isIterateeCall = require('./isIterateeCall'),\n    toIterable = require('./toIterable');\n\n/**\n * Creates a `_.max` or `_.min` function.\n *\n * @private\n * @param {Function} comparator The function used to compare values.\n * @param {*} exValue The initial extremum value.\n * @returns {Function} Returns the new extremum function.\n */\nfunction createExtremum(comparator, exValue) {\n  return function(collection, iteratee, thisArg) {\n    if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n      iteratee = undefined;\n    }\n    iteratee = baseCallback(iteratee, thisArg, 3);\n    if (iteratee.length == 1) {\n      collection = isArray(collection) ? collection : toIterable(collection);\n      var result = arrayExtremum(collection, iteratee, comparator, exValue);\n      if (!(collection.length && result === exValue)) {\n        return result;\n      }\n    }\n    return baseExtremum(collection, iteratee, comparator, exValue);\n  };\n}\n\nmodule.exports = createExtremum;\n"]}