{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/object/forOwnRight.js"],"names":["baseForOwnRight","require","createForOwn","forOwnRight","module","exports"],"mappings":";;AAAA,IAAIA,kBAAkBC,QAAQ,6BAAR,CAAtB;AAAA,IACIC,eAAeD,QAAQ,0BAAR,CADnB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAIE,cAAcD,aAAaF,eAAb,CAAlB;;AAEAI,OAAOC,OAAP,GAAiBF,WAAjB","file":"forOwnRight.js","sourcesContent":["var baseForOwnRight = require('../internal/baseForOwnRight'),\n    createForOwn = require('../internal/createForOwn');\n\n/**\n * This method is like `_.forOwn` except that it iterates over properties of\n * `object` in the opposite order.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwnRight(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'\n */\nvar forOwnRight = createForOwn(baseForOwnRight);\n\nmodule.exports = forOwnRight;\n"]}