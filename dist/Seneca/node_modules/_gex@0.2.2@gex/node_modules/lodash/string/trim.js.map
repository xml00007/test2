{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/string/trim.js"],"names":["baseToString","require","charsLeftIndex","charsRightIndex","isIterateeCall","trimmedLeftIndex","trimmedRightIndex","trim","string","chars","guard","value","slice","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;AAAA,IAEIE,kBAAkBF,QAAQ,6BAAR,CAFtB;AAAA,IAGIG,iBAAiBH,QAAQ,4BAAR,CAHrB;AAAA,IAIII,mBAAmBJ,QAAQ,8BAAR,CAJvB;AAAA,IAKIK,oBAAoBL,QAAQ,+BAAR,CALxB;;AAOA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASM,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClC,MAAIC,QAAQH,MAAZ;AACAA,WAASR,aAAaQ,MAAb,CAAT;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAOA,MAAP;AACD;AACD,MAAIE,QAAQN,eAAeO,KAAf,EAAsBF,KAAtB,EAA6BC,KAA7B,CAAR,GAA8CD,SAAS,IAA3D,EAAiE;AAC/D,WAAOD,OAAOI,KAAP,CAAaP,iBAAiBG,MAAjB,CAAb,EAAuCF,kBAAkBE,MAAlB,IAA4B,CAAnE,CAAP;AACD;AACDC,UAASA,QAAQ,EAAjB;AACA,SAAOD,OAAOI,KAAP,CAAaV,eAAeM,MAAf,EAAuBC,KAAvB,CAAb,EAA4CN,gBAAgBK,MAAhB,EAAwBC,KAAxB,IAAiC,CAA7E,CAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiBP,IAAjB","file":"trim.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    charsLeftIndex = require('../internal/charsLeftIndex'),\n    charsRightIndex = require('../internal/charsRightIndex'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    trimmedLeftIndex = require('../internal/trimmedLeftIndex'),\n    trimmedRightIndex = require('../internal/trimmedRightIndex');\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  var value = string;\n  string = baseToString(string);\n  if (!string) {\n    return string;\n  }\n  if (guard ? isIterateeCall(value, chars, guard) : chars == null) {\n    return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);\n  }\n  chars = (chars + '');\n  return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);\n}\n\nmodule.exports = trim;\n"]}