{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/string/words.js"],"names":["baseToString","require","isIterateeCall","reWords","upper","lower","RegExp","words","string","pattern","guard","undefined","match","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;;AAGA;AACA,IAAIE,UAAW,YAAW;AACxB,MAAIC,QAAQ,6BAAZ;AAAA,MACIC,QAAQ,8BADZ;;AAGA,SAAOC,OAAOF,QAAQ,MAAR,GAAiBA,KAAjB,GAAyBC,KAAzB,GAAiC,IAAjC,GAAwCD,KAAxC,GAAgD,GAAhD,GAAsDC,KAAtD,GAA8D,GAA9D,GAAoED,KAApE,GAA4E,UAAnF,EAA+F,GAA/F,CAAP;AACD,CALc,EAAf;;AAOA;;;;;;;;;;;;;;;;;;AAkBA,SAASG,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuC;AACrC,MAAIA,SAASR,eAAeM,MAAf,EAAuBC,OAAvB,EAAgCC,KAAhC,CAAb,EAAqD;AACnDD,cAAUE,SAAV;AACD;AACDH,WAASR,aAAaQ,MAAb,CAAT;AACA,SAAOA,OAAOI,KAAP,CAAaH,WAAWN,OAAxB,KAAoC,EAA3C;AACD;;AAEDU,OAAOC,OAAP,GAAiBP,KAAjB","file":"words.js","sourcesContent":["var baseToString = require('../internal/baseToString'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/** Used to match words to create compound words. */\nvar reWords = (function() {\n  var upper = '[A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde]',\n      lower = '[a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff]+';\n\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}());\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  if (guard && isIterateeCall(string, pattern, guard)) {\n    pattern = undefined;\n  }\n  string = baseToString(string);\n  return string.match(pattern || reWords) || [];\n}\n\nmodule.exports = words;\n"]}