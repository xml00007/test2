{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/string/template.js"],"names":["assignOwnDefaults","require","assignWith","attempt","baseAssign","baseToString","baseValues","escapeStringChar","isError","isIterateeCall","keys","reInterpolate","templateSettings","reEmptyStringLeading","reEmptyStringMiddle","reEmptyStringTrailing","reEsTemplate","reNoMatch","reUnescapedString","template","string","options","otherOptions","settings","imports","_","undefined","importsKeys","importsValues","isEscaping","isEvaluating","index","interpolate","source","reDelimiters","RegExp","escape","evaluate","sourceURL","replace","match","escapeValue","interpolateValue","esTemplateValue","evaluateValue","offset","slice","length","variable","result","Function","apply","module","exports"],"mappings":"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","file":"template.js","sourcesContent":["var assignOwnDefaults = require('../internal/assignOwnDefaults'),\n    assignWith = require('../internal/assignWith'),\n    attempt = require('../utility/attempt'),\n    baseAssign = require('../internal/baseAssign'),\n    baseToString = require('../internal/baseToString'),\n    baseValues = require('../internal/baseValues'),\n    escapeStringChar = require('../internal/escapeStringChar'),\n    isError = require('../lang/isError'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    keys = require('../object/keys'),\n    reInterpolate = require('../internal/reInterpolate'),\n    templateSettings = require('./templateSettings');\n\n/** Used to match empty string literals in compiled template source. */\nvar reEmptyStringLeading = /\\b__p \\+= '';/g,\n    reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n    reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n/** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */\nvar reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n/** Used to ensure capturing order of template delimiters. */\nvar reNoMatch = /($^)/;\n\n/** Used to match unescaped characters in compiled string literals. */\nvar reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n/**\n * Creates a compiled template function that can interpolate data properties\n * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n * properties may be accessed as free variables in the template. If a setting\n * object is provided it takes precedence over `_.templateSettings` values.\n *\n * **Note:** In the development build `_.template` utilizes\n * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n * for easier debugging.\n *\n * For more information on precompiling templates see\n * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n *\n * For more information on Chrome extension sandboxes see\n * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n *\n * @static\n * @memberOf _\n * @category String\n * @param {string} [string=''] The template string.\n * @param {Object} [options] The options object.\n * @param {RegExp} [options.escape] The HTML \"escape\" delimiter.\n * @param {RegExp} [options.evaluate] The \"evaluate\" delimiter.\n * @param {Object} [options.imports] An object to import into the template as free variables.\n * @param {RegExp} [options.interpolate] The \"interpolate\" delimiter.\n * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.\n * @param {string} [options.variable] The data object variable name.\n * @param- {Object} [otherOptions] Enables the legacy `options` param signature.\n * @returns {Function} Returns the compiled template function.\n * @example\n *\n * // using the \"interpolate\" delimiter to create a compiled template\n * var compiled = _.template('hello <%= user %>!');\n * compiled({ 'user': 'fred' });\n * // => 'hello fred!'\n *\n * // using the HTML \"escape\" delimiter to escape data property values\n * var compiled = _.template('<b><%- value %></b>');\n * compiled({ 'value': '<script>' });\n * // => '<b>&lt;script&gt;</b>'\n *\n * // using the \"evaluate\" delimiter to execute JavaScript and generate HTML\n * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // using the internal `print` function in \"evaluate\" delimiters\n * var compiled = _.template('<% print(\"hello \" + user); %>!');\n * compiled({ 'user': 'barney' });\n * // => 'hello barney!'\n *\n * // using the ES delimiter as an alternative to the default \"interpolate\" delimiter\n * var compiled = _.template('hello ${ user }!');\n * compiled({ 'user': 'pebbles' });\n * // => 'hello pebbles!'\n *\n * // using custom template delimiters\n * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n * var compiled = _.template('hello {{ user }}!');\n * compiled({ 'user': 'mustache' });\n * // => 'hello mustache!'\n *\n * // using backslashes to treat delimiters as plain text\n * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n * compiled({ 'value': 'ignored' });\n * // => '<%- value %>'\n *\n * // using the `imports` option to import `jQuery` as `jq`\n * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n * compiled({ 'users': ['fred', 'barney'] });\n * // => '<li>fred</li><li>barney</li>'\n *\n * // using the `sourceURL` option to specify a custom sourceURL for the template\n * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n * compiled(data);\n * // => find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector\n *\n * // using the `variable` option to ensure a with-statement isn't used in the compiled template\n * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n * compiled.source;\n * // => function(data) {\n * //   var __t, __p = '';\n * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n * //   return __p;\n * // }\n *\n * // using the `source` property to inline compiled templates for meaningful\n * // line numbers in error messages and a stack trace\n * fs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n *   var JST = {\\\n *     \"main\": ' + _.template(mainText).source + '\\\n *   };\\\n * ');\n */\nfunction template(string, options, otherOptions) {\n  // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)\n  // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n  var settings = templateSettings.imports._.templateSettings || templateSettings;\n\n  if (otherOptions && isIterateeCall(string, options, otherOptions)) {\n    options = otherOptions = undefined;\n  }\n  string = baseToString(string);\n  options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);\n\n  var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),\n      importsKeys = keys(imports),\n      importsValues = baseValues(imports, importsKeys);\n\n  var isEscaping,\n      isEvaluating,\n      index = 0,\n      interpolate = options.interpolate || reNoMatch,\n      source = \"__p += '\";\n\n  // Compile the regexp to match each delimiter.\n  var reDelimiters = RegExp(\n    (options.escape || reNoMatch).source + '|' +\n    interpolate.source + '|' +\n    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n    (options.evaluate || reNoMatch).source + '|$'\n  , 'g');\n\n  // Use a sourceURL for easier debugging.\n  var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\\n' : '';\n\n  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n    interpolateValue || (interpolateValue = esTemplateValue);\n\n    // Escape characters that can't be included in string literals.\n    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n    // Replace delimiters with snippets.\n    if (escapeValue) {\n      isEscaping = true;\n      source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n    }\n    if (evaluateValue) {\n      isEvaluating = true;\n      source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n    }\n    if (interpolateValue) {\n      source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n    }\n    index = offset + match.length;\n\n    // The JS engine embedded in Adobe products requires returning the `match`\n    // string in order to produce the correct `offset` value.\n    return match;\n  });\n\n  source += \"';\\n\";\n\n  // If `variable` is not specified wrap a with-statement around the generated\n  // code to add the data object to the top of the scope chain.\n  var variable = options.variable;\n  if (!variable) {\n    source = 'with (obj) {\\n' + source + '\\n}\\n';\n  }\n  // Cleanup code by stripping empty strings.\n  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n    .replace(reEmptyStringMiddle, '$1')\n    .replace(reEmptyStringTrailing, '$1;');\n\n  // Frame code as the function body.\n  source = 'function(' + (variable || 'obj') + ') {\\n' +\n    (variable\n      ? ''\n      : 'obj || (obj = {});\\n'\n    ) +\n    \"var __t, __p = ''\" +\n    (isEscaping\n       ? ', __e = _.escape'\n       : ''\n    ) +\n    (isEvaluating\n      ? ', __j = Array.prototype.join;\\n' +\n        \"function print() { __p += __j.call(arguments, '') }\\n\"\n      : ';\\n'\n    ) +\n    source +\n    'return __p\\n}';\n\n  var result = attempt(function() {\n    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);\n  });\n\n  // Provide the compiled function's source by its `toString` method or\n  // the `source` property as a convenience for inlining compiled templates.\n  result.source = source;\n  if (isError(result)) {\n    throw result;\n  }\n  return result;\n}\n\nmodule.exports = template;\n"]}