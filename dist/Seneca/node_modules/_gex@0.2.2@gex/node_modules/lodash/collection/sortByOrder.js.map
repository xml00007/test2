{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/collection/sortByOrder.js"],"names":["baseSortByOrder","require","isArray","isIterateeCall","sortByOrder","collection","iteratees","orders","guard","undefined","module","exports"],"mappings":";;AAAA,IAAIA,kBAAkBC,QAAQ,6BAAR,CAAtB;AAAA,IACIC,UAAUD,QAAQ,iBAAR,CADd;AAAA,IAEIE,iBAAiBF,QAAQ,4BAAR,CAFrB;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASG,WAAT,CAAqBC,UAArB,EAAiCC,SAAjC,EAA4CC,MAA5C,EAAoDC,KAApD,EAA2D;AACzD,MAAIH,cAAc,IAAlB,EAAwB;AACtB,WAAO,EAAP;AACD;AACD,MAAIG,SAASL,eAAeG,SAAf,EAA0BC,MAA1B,EAAkCC,KAAlC,CAAb,EAAuD;AACrDD,aAASE,SAAT;AACD;AACD,MAAI,CAACP,QAAQI,SAAR,CAAL,EAAyB;AACvBA,gBAAYA,aAAa,IAAb,GAAoB,EAApB,GAAyB,CAACA,SAAD,CAArC;AACD;AACD,MAAI,CAACJ,QAAQK,MAAR,CAAL,EAAsB;AACpBA,aAASA,UAAU,IAAV,GAAiB,EAAjB,GAAsB,CAACA,MAAD,CAA/B;AACD;AACD,SAAOP,gBAAgBK,UAAhB,EAA4BC,SAA5B,EAAuCC,MAAvC,CAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBP,WAAjB","file":"sortByOrder.js","sourcesContent":["var baseSortByOrder = require('../internal/baseSortByOrder'),\n    isArray = require('../lang/isArray'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * This method is like `_.sortByAll` except that it allows specifying the\n * sort orders of the iteratees to sort by. If `orders` is unspecified, all\n * values are sorted in ascending order. Otherwise, a value is sorted in\n * ascending order if its corresponding order is \"asc\", and descending if \"desc\".\n *\n * If a property name is provided for an iteratee the created `_.property`\n * style callback returns the property value of the given element.\n *\n * If an object is provided for an iteratee the created `_.matches` style\n * callback returns `true` for elements that have the properties of the given\n * object, else `false`.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {boolean[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 42 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // sort by `user` in ascending order and by `age` in descending order\n * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);\n * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]\n */\nfunction sortByOrder(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (guard && isIterateeCall(iteratees, orders, guard)) {\n    orders = undefined;\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseSortByOrder(collection, iteratees, orders);\n}\n\nmodule.exports = sortByOrder;\n"]}