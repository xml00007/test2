{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/collection/sortBy.js"],"names":["baseCallback","require","baseMap","baseSortBy","compareAscending","isIterateeCall","sortBy","collection","iteratee","thisArg","undefined","index","result","value","key","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,0BAAR,CAAnB;AAAA,IACIC,UAAUD,QAAQ,qBAAR,CADd;AAAA,IAEIE,aAAaF,QAAQ,wBAAR,CAFjB;AAAA,IAGIG,mBAAmBH,QAAQ,8BAAR,CAHvB;AAAA,IAIII,iBAAiBJ,QAAQ,4BAAR,CAJrB;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA,SAASK,MAAT,CAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,OAAtC,EAA+C;AAC7C,MAAIF,cAAc,IAAlB,EAAwB;AACtB,WAAO,EAAP;AACD;AACD,MAAIE,WAAWJ,eAAeE,UAAf,EAA2BC,QAA3B,EAAqCC,OAArC,CAAf,EAA8D;AAC5DD,eAAWE,SAAX;AACD;AACD,MAAIC,QAAQ,CAAC,CAAb;AACAH,aAAWR,aAAaQ,QAAb,EAAuBC,OAAvB,EAAgC,CAAhC,CAAX;;AAEA,MAAIG,SAASV,QAAQK,UAAR,EAAoB,UAASM,KAAT,EAAgBC,GAAhB,EAAqBP,UAArB,EAAiC;AAChE,WAAO,EAAE,YAAYC,SAASK,KAAT,EAAgBC,GAAhB,EAAqBP,UAArB,CAAd,EAAgD,SAAS,EAAEI,KAA3D,EAAkE,SAASE,KAA3E,EAAP;AACD,GAFY,CAAb;AAGA,SAAOV,WAAWS,MAAX,EAAmBR,gBAAnB,CAAP;AACD;;AAEDW,OAAOC,OAAP,GAAiBV,MAAjB","file":"sortBy.js","sourcesContent":["var baseCallback = require('../internal/baseCallback'),\n    baseMap = require('../internal/baseMap'),\n    baseSortBy = require('../internal/baseSortBy'),\n    compareAscending = require('../internal/compareAscending'),\n    isIterateeCall = require('../internal/isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection through `iteratee`. This method performs\n * a stable sort, that is, it preserves the original sort order of equal elements.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection).\n *\n * If a property name is provided for `iteratee` the created `_.property`\n * style callback returns the property value of the given element.\n *\n * If a value is also provided for `thisArg` the created `_.matchesProperty`\n * style callback returns `true` for elements that have a matching property\n * value, else `false`.\n *\n * If an object is provided for `iteratee` the created `_.matches` style\n * callback returns `true` for elements that have the properties of the given\n * object, else `false`.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n *  per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * _.sortBy([1, 2, 3], function(n) {\n *   return Math.sin(n);\n * });\n * // => [3, 1, 2]\n *\n * _.sortBy([1, 2, 3], function(n) {\n *   return this.sin(n);\n * }, Math);\n * // => [3, 1, 2]\n *\n * var users = [\n *   { 'user': 'fred' },\n *   { 'user': 'pebbles' },\n *   { 'user': 'barney' }\n * ];\n *\n * // using the `_.property` callback shorthand\n * _.pluck(_.sortBy(users, 'user'), 'user');\n * // => ['barney', 'fred', 'pebbles']\n */\nfunction sortBy(collection, iteratee, thisArg) {\n  if (collection == null) {\n    return [];\n  }\n  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {\n    iteratee = undefined;\n  }\n  var index = -1;\n  iteratee = baseCallback(iteratee, thisArg, 3);\n\n  var result = baseMap(collection, function(value, key, collection) {\n    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };\n  });\n  return baseSortBy(result, compareAscending);\n}\n\nmodule.exports = sortBy;\n"]}