{"version":3,"sources":["../../../../../../../Seneca/node_modules/_gex@0.2.2@gex/node_modules/lodash/collection/sample.js"],"names":["baseRandom","require","isIterateeCall","toArray","toIterable","nativeMin","Math","min","sample","collection","n","guard","length","undefined","index","result","lastIndex","rand","value","module","exports"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,wBAAR,CAAjB;AAAA,IACIC,iBAAiBD,QAAQ,4BAAR,CADrB;AAAA,IAEIE,UAAUF,QAAQ,iBAAR,CAFd;AAAA,IAGIG,aAAaH,QAAQ,wBAAR,CAHjB;;AAKA;AACA,IAAII,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAASC,MAAT,CAAgBC,UAAhB,EAA4BC,CAA5B,EAA+BC,KAA/B,EAAsC;AACpC,QAAIA,QAAQT,eAAeO,UAAf,EAA2BC,CAA3B,EAA8BC,KAA9B,CAAR,GAA+CD,KAAK,IAAxD,EAA8D;AAC5DD,qBAAaL,WAAWK,UAAX,CAAb;AACA,YAAIG,SAASH,WAAWG,MAAxB;AACA,eAAOA,SAAS,CAAT,GAAaH,WAAWT,WAAW,CAAX,EAAcY,SAAS,CAAvB,CAAX,CAAb,GAAqDC,SAA5D;AACD;AACD,QAAIC,QAAQ,CAAC,CAAb;AAAA,QACIC,SAASZ,QAAQM,UAAR,CADb;AAAA,QAEIG,SAASG,OAAOH,MAFpB;AAAA,QAGII,YAAYJ,SAAS,CAHzB;;AAKAF,QAAIL,UAAUK,IAAI,CAAJ,GAAQ,CAAR,GAAa,CAACA,CAAD,IAAM,CAA7B,EAAiCE,MAAjC,CAAJ;AACA,WAAO,EAAEE,KAAF,GAAUJ,CAAjB,EAAoB;AAClB,YAAIO,OAAOjB,WAAWc,KAAX,EAAkBE,SAAlB,CAAX;AAAA,YACIE,QAAQH,OAAOE,IAAP,CADZ;;AAGAF,eAAOE,IAAP,IAAeF,OAAOD,KAAP,CAAf;AACAC,eAAOD,KAAP,IAAgBI,KAAhB;AACD;AACDH,WAAOH,MAAP,GAAgBF,CAAhB;AACA,WAAOK,MAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiBZ,MAAjB","file":"sample.js","sourcesContent":["var baseRandom = require('../internal/baseRandom'),\n    isIterateeCall = require('../internal/isIterateeCall'),\n    toArray = require('../lang/toArray'),\n    toIterable = require('../internal/toIterable');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Gets a random element or `n` random elements from a collection.\n *\n * @static\n * @memberOf _\n * @category Collection\n * @param {Array|Object|string} collection The collection to sample.\n * @param {number} [n] The number of elements to sample.\n * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.\n * @returns {*} Returns the random sample(s).\n * @example\n *\n * _.sample([1, 2, 3, 4]);\n * // => 2\n *\n * _.sample([1, 2, 3, 4], 2);\n * // => [3, 1]\n */\nfunction sample(collection, n, guard) {\n  if (guard ? isIterateeCall(collection, n, guard) : n == null) {\n    collection = toIterable(collection);\n    var length = collection.length;\n    return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;\n  }\n  var index = -1,\n      result = toArray(collection),\n      length = result.length,\n      lastIndex = length - 1;\n\n  n = nativeMin(n < 0 ? 0 : (+n || 0), length);\n  while (++index < n) {\n    var rand = baseRandom(index, lastIndex),\n        value = result[rand];\n\n    result[rand] = result[index];\n    result[index] = value;\n  }\n  result.length = n;\n  return result;\n}\n\nmodule.exports = sample;\n"]}