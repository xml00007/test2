{"version":3,"sources":["../../../../Seneca/node_modules/_norma@0.3.0@norma/norma-parser.js"],"names":["module","exports","peg$subclass","child","parent","ctor","constructor","prototype","SyntaxError","message","expected","found","offset","line","column","name","Error","parse","input","options","arguments","length","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c0","peg$c1","peg$c2","peg$c3","type","value","description","peg$c4","peg$c5","peg$c6","peg$c7","forceobj","slotstack","object","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","n","t","m","push","mod","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","h","join","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","mark","or","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","error","peg$currPos","peg$reportedPos","peg$cachedPos","peg$cachedPosDetails","seenCR","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","text","substring","peg$computePosDetails","peg$buildException","pos","advance","details","startPos","endPos","p","ch","charAt","peg$fail","cleanupExpected","i","sort","a","b","splice","buildMessage","stringEscape","s","hex","charCodeAt","toString","toUpperCase","replace","expectedDescs","Array","expectedDesc","foundDesc","slice","posDetails","s0","s1","s2","s3","s4","s5","s6","s7","s8","peg$parsews","peg$parseslot","peg$parsesep","test","peg$parsename","peg$parsetype","peg$parsemod","peg$parsetypeatom","peg$parseany","peg$parsestring","peg$parseinteger","peg$parsenan","peg$parseinfinity","peg$parsenumber","peg$parseboolean","peg$parsefunction","peg$parsearray","peg$parseregexp","peg$parsedate","peg$parsearguments","peg$parseerror","peg$parsenull","peg$parseundefined","peg$parseobject","peg$parsebadtype"],"mappings":"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","file":"norma-parser.js","sourcesContent":["module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = \"{\",\n        peg$c3 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c4 = [],\n        peg$c5 = \"}\",\n        peg$c6 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c7 = function(forceobj) { \n            slotstack.object = !!forceobj\n            return slotstack \n          },\n        peg$c8 = /^[ \\t\\r\\n]/,\n        peg$c9 = { type: \"class\", value: \"[ \\\\t\\\\r\\\\n]\", description: \"[ \\\\t\\\\r\\\\n]\" },\n        peg$c10 = \",\",\n        peg$c11 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c12 = function(n, t, m) { slotstack.push({name:n, type:t, mod:m}) },\n        peg$c13 = /^[a-zA-Z]/,\n        peg$c14 = { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n        peg$c15 = /^[a-zA-Z0-9]/,\n        peg$c16 = { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n        peg$c17 = \":\",\n        peg$c18 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c19 = function(h, t) { return h+t.join('') },\n        peg$c20 = \"?\",\n        peg$c21 = { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n        peg$c22 = function() {return '?' },\n        peg$c23 = \"*\",\n        peg$c24 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n        peg$c25 = function() {return '*' },\n        peg$c26 = \"+\",\n        peg$c27 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c28 = function() {return '+' },\n        peg$c29 = \"|\",\n        peg$c30 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c31 = function(t) { return {mark:t[0],or:t[1]} },\n        peg$c32 = function() { return '.' },\n        peg$c33 = function() { return 's' },\n        peg$c34 = function() { return 'i' },\n        peg$c35 = function() { return 'A' },\n        peg$c36 = function() { return 'Y' },\n        peg$c37 = function() { return 'n' },\n        peg$c38 = function() { return 'b' },\n        peg$c39 = function() { return 'f' },\n        peg$c40 = function() { return 'a' },\n        peg$c41 = function() { return 'r' },\n        peg$c42 = function() { return 'd' },\n        peg$c43 = function() { return 'g' },\n        peg$c44 = function() { return 'e' },\n        peg$c45 = function() { return 'N' },\n        peg$c46 = function() { return 'U' },\n        peg$c47 = function() { return 'o' },\n        peg$c48 = \".\",\n        peg$c49 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c50 = \"s\",\n        peg$c51 = { type: \"literal\", value: \"s\", description: \"\\\"s\\\"\" },\n        peg$c52 = \"i\",\n        peg$c53 = { type: \"literal\", value: \"i\", description: \"\\\"i\\\"\" },\n        peg$c54 = \"A\",\n        peg$c55 = { type: \"literal\", value: \"A\", description: \"\\\"A\\\"\" },\n        peg$c56 = \"Y\",\n        peg$c57 = { type: \"literal\", value: \"Y\", description: \"\\\"Y\\\"\" },\n        peg$c58 = \"n\",\n        peg$c59 = { type: \"literal\", value: \"n\", description: \"\\\"n\\\"\" },\n        peg$c60 = \"b\",\n        peg$c61 = { type: \"literal\", value: \"b\", description: \"\\\"b\\\"\" },\n        peg$c62 = \"f\",\n        peg$c63 = { type: \"literal\", value: \"f\", description: \"\\\"f\\\"\" },\n        peg$c64 = \"a\",\n        peg$c65 = { type: \"literal\", value: \"a\", description: \"\\\"a\\\"\" },\n        peg$c66 = \"r\",\n        peg$c67 = { type: \"literal\", value: \"r\", description: \"\\\"r\\\"\" },\n        peg$c68 = \"d\",\n        peg$c69 = { type: \"literal\", value: \"d\", description: \"\\\"d\\\"\" },\n        peg$c70 = \"g\",\n        peg$c71 = { type: \"literal\", value: \"g\", description: \"\\\"g\\\"\" },\n        peg$c72 = \"e\",\n        peg$c73 = { type: \"literal\", value: \"e\", description: \"\\\"e\\\"\" },\n        peg$c74 = \"N\",\n        peg$c75 = { type: \"literal\", value: \"N\", description: \"\\\"N\\\"\" },\n        peg$c76 = \"U\",\n        peg$c77 = { type: \"literal\", value: \"U\", description: \"\\\"U\\\"\" },\n        peg$c78 = \"o\",\n        peg$c79 = { type: \"literal\", value: \"o\", description: \"\\\"o\\\"\" },\n        peg$c80 = /^[^}]/,\n        peg$c81 = { type: \"class\", value: \"[^}]\", description: \"[^}]\" },\n        peg$c82 = function(t) { error('not a type character: \"'+t+'\"') },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s2 = peg$c2;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseslot();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parsesep();\n              if (s7 === peg$FAILED) {\n                s7 = peg$c1;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseslot();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$c0;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$parsesep();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$c1;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseslot();\n                  if (s8 !== peg$FAILED) {\n                    s7 = [s7, s8];\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsesep();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c5;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$c1;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsews();\n                    if (s8 === peg$FAILED) {\n                      s8 = peg$c1;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c7(s2);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0;\n\n      if (peg$c8.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesep() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c10;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c11); }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parseslot() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsename();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetype();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsemod();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c12(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsename() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (peg$c13.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c14); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c15.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c15.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c17;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c18); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c19(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemod() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 63) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c22();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 42) {\n          s1 = peg$c23;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c25();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c26;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c27); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c28();\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsetype() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsetypeatom();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 124) {\n          s5 = peg$c29;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsetypeatom();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c0;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 124) {\n            s5 = peg$c29;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsetypeatom();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c31(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsetypeatom() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parseany();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c32();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsestring();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c33();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseinteger();\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c34();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsenan();\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c35();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseinfinity();\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c36();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsenumber();\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c37();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseboolean();\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c38();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsefunction();\n                    if (s1 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c39();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parsearray();\n                      if (s1 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c40();\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseregexp();\n                        if (s1 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c41();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          s1 = peg$parsedate();\n                          if (s1 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c42();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$parsearguments();\n                            if (s1 !== peg$FAILED) {\n                              peg$reportedPos = s0;\n                              s1 = peg$c43();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              s1 = peg$parseerror();\n                              if (s1 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c44();\n                              }\n                              s0 = s1;\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                s1 = peg$parsenull();\n                                if (s1 !== peg$FAILED) {\n                                  peg$reportedPos = s0;\n                                  s1 = peg$c45();\n                                }\n                                s0 = s1;\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n                                  s1 = peg$parseundefined();\n                                  if (s1 !== peg$FAILED) {\n                                    peg$reportedPos = s0;\n                                    s1 = peg$c46();\n                                  }\n                                  s0 = s1;\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    s1 = peg$parseobject();\n                                    if (s1 !== peg$FAILED) {\n                                      peg$reportedPos = s0;\n                                      s1 = peg$c47();\n                                    }\n                                    s0 = s1;\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$parsebadtype();\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseany() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s0 = peg$c48;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsestring() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 115) {\n        s0 = peg$c50;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c51); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 105) {\n        s0 = peg$c52;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c53); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenan() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 65) {\n        s0 = peg$c54;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseinfinity() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 89) {\n        s0 = peg$c56;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c57); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 110) {\n        s0 = peg$c58;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c59); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseboolean() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 98) {\n        s0 = peg$c60;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c61); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefunction() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 102) {\n        s0 = peg$c62;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsearray() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 97) {\n        s0 = peg$c64;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c65); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseregexp() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 114) {\n        s0 = peg$c66;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c67); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedate() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 100) {\n        s0 = peg$c68;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c69); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsearguments() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 103) {\n        s0 = peg$c70;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c71); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseerror() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 101) {\n        s0 = peg$c72;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c73); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenull() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 78) {\n        s0 = peg$c74;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c75); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseundefined() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 85) {\n        s0 = peg$c76;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseobject() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 111) {\n        s0 = peg$c78;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsebadtype() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (peg$c80.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c82(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n\n      var slotstack = []\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n"]}