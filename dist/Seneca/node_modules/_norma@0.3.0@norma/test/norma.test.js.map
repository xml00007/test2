{"version":3,"sources":["../../../../../Seneca/node_modules/_norma@0.3.0@norma/test/norma.test.js"],"names":["util","require","assert","_","norma","describe","it","equal","inspect","fail","e","code","ok","message","indexOf","onfail","compile","Date","test_args","arguments","NaN","Infinity","Error","TypeError","n1","compiled","a","undefined"],"mappings":"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","file":"norma.test.js","sourcesContent":["/* Copyright (c) 2014-2015 Richard Rodger, MIT License */\n\"use strict\";\n\n\n// mocha norma.test.js\n\nvar util   = require('util')\nvar assert = require('assert')\n\nvar _     = require('lodash')\nvar norma = require('..')\n\n\n\ndescribe('norma', function(){\n\n  it('happy', function(){\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 'si', [\"a\",1] )))\n    assert.equal( \"[ 'a', undefined ]\", util.inspect( norma( 'si?', [\"a\"] )))\n    assert.equal( \"[ undefined, 1 ]\", util.inspect( norma( 's?i', [1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 's i', [\"a\",1] )))\n    assert.equal( \"[ 'a', undefined ]\", util.inspect( norma( 's i?', [\"a\"] )))\n    assert.equal( \"[ undefined, 1 ]\", util.inspect( norma( 's? i', [1] )))\n    assert.equal( \"[ 1.1 ]\", util.inspect( norma( 'n', [1.1] )))\n    assert.equal( \"[ 'b', 2, foo: 'b', bar: 2 ]\", \n                  util.inspect( norma( 'foo:s bar:i', [\"b\",2] )))\n    assert.equal( \"{ foo: 'b', bar: 2 }\", \n                  util.inspect( norma( '{foo:s bar:i}', [\"b\",2] )))\n  })\n\n\n  it('no-match', function(){\n    try {\n      util.inspect( norma( 'i', [1.1] ))\n      assert.fail();\n    }\n    catch(e){ assert.equal('invalid_arguments',e.code); assert.ok(e.message.indexOf('invalid')) }\n\n    assert.equal( \"null\", util.inspect( norma( 'i', {onfail:'null'}, [1.1] )))\n  })\n\n\n  it('bad-parse', function(){\n    try { norma.compile( 'q' ) } catch(e) { \n      assert.equal('parse',e.code)\n      assert.equal('norma: not a type character: \"q\"; spec:\"q\", col:1, line:1',e.message) \n    }\n  })\n\n\n  it('alternates', function(){\n    assert.equal( \"[ 'c', true ]\", util.inspect( norma( 's|i b', [\"c\",true] )))\n    assert.equal( \"[ 3, false ]\", util.inspect( norma( 's|i b', [3,false] )))\n    assert.equal( \"[ 'd' ]\", util.inspect( norma( 's|i|b', ['d'] )))\n    assert.equal( \"[ 4 ]\", util.inspect( norma( 's|i|b', [4] )))\n    assert.equal( \"[ true ]\", util.inspect( norma( 's|i|b', [true] )))\n  })\n\n\n  it('commas', function(){\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 's,i', [\"a\",1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 's, i', [\"a\",1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 's ,i', [\"a\",1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( 's , i', [\"a\",1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( ' s , i', [\"a\",1] )))\n    assert.equal( \"[ 'a', 1 ]\", util.inspect( norma( ' s , i ', [\"a\",1] )))\n  })\n\n\n  it('misc-objects', function(){\n    assert.equal( \"[ /a/ ]\", util.inspect( norma( 'r', [/a/] )))\n    assert.equal( \"[ 1, /a/ ]\", util.inspect( norma( 'ir', [1,/a/] )))\n    assert.equal( \n      \"[ Mon Feb 10 2014 23:29:53 GMT+0000 (GMT) ]\", \n      util.inspect( norma( 'd', [new Date(\"2014-02-10T23:29:53.281Z\")] )))\n    assert.equal( \n      \"[ Mon Feb 10 2014 23:29:53 GMT+0000 (GMT), 9.9 ]\", \n      util.inspect( norma( 'dn', [new Date(\"2014-02-10T23:29:53.281Z\"),9.9] )))\n\n    function test_args(){\n      assert.equal( \"[ { '0': 999 } ]\", util.inspect( norma( 'g', [arguments] )))\n    }\n    test_args(999)\n\n    assert.equal( \"[ null ]\", util.inspect( norma( 'N', [null] )))\n    assert.equal( \"[ undefined ]\", util.inspect( norma( 'U', [void 0] )))\n\n    assert.equal( \"[ NaN ]\", util.inspect( norma( 'A', [NaN] )))\n    assert.equal( \"[ Infinity ]\", util.inspect( norma( 'Y', [Infinity] )))\n\n    assert.equal( \"[ [Error: a] ]\", util.inspect( norma( 'e', [new Error('a')] )))\n    assert.equal( \"[ [TypeError: b] ]\", util.inspect( norma( 'e', [new TypeError('b')] )))\n  })\n\n\n  it('compile', function(){\n    var n1 = norma.compile('s')\n    assert.equal( \"[ 'foo' ]\", util.inspect( n1( ['foo'] )))\n    assert.equal( \"[ 'bar' ]\", util.inspect( n1( ['bar'] )))\n\n    assert.equal(\"{ spec: 's', re: '/^(s)$/' }\",''+n1)\n  })\n\n\n  it('dot', function(){\n    assert.equal( \"[ 'foo' ]\", util.inspect( norma( '.', ['foo'] )))\n    assert.equal( \"[ 1 ]\", util.inspect( norma( '.', [1] )))\n    assert.equal( \"[ true, 1, 'a' ]\", util.inspect( norma( 'b.s', [true,1,'a'] )))\n  })\n\n\n  it('star', function(){\n    assert.equal( \"[ undefined ]\", util.inspect( norma( 's*', [] )))\n    assert.equal( \"[ 'a' ]\", util.inspect( norma( 's*', ['a'] )))\n    assert.equal( \"[ 'a', 'a' ]\", util.inspect( norma( 's*', ['a','a'] )))\n    assert.equal( \"[ 'a', 1, 2, 3 ]\", util.inspect( norma( 'si*', ['a',1,2,3] )))\n    assert.equal( \"[ 'a', undefined ]\", util.inspect( norma( 'si*', ['a'] )))\n    assert.equal( \"[ 'a', 1, 2, 3, true ]\", util.inspect( norma( 's.*b', ['a',1,2,3,true] )))\n    assert.equal( \"[ 'a', undefined, true ]\", util.inspect( norma( 's.*b', ['a',true] )))\n\n    assert.equal( \"[ 'a', 1, 2, 3, foo: [ 1, 2, 3 ] ]\", util.inspect( norma( 's foo:i*', ['a',1,2,3] )))\n    assert.equal( \"{ bar: 'a', foo: [ 1, 2, 3 ] }\", util.inspect( norma( '{bar:s foo:i*}', ['a',1,2,3] )))\n  })\n\n\n  it('plus', function(){\n    try {\n      norma( 's+', [] )\n      assert.fail()\n    }\n    catch(e) { \n      assert.equal('invalid_arguments',e.code)\n      assert.equal('norma: invalid arguments; expected: \"s+\", was: []; values: ',e.message)\n    }\n\n    assert.equal( \"[ 'a' ]\", util.inspect( norma( 's+', ['a'] )))\n    assert.equal( \"[ 'a', 'a' ]\", util.inspect( norma( 's+', ['a','a'] )))\n    assert.equal( \"[ 'a', 1, 2, 3 ]\", util.inspect( norma( 'si+', ['a',1,2,3] )))\n    assert.equal( \"[ 'a', 1, 2, 3, true ]\", util.inspect( norma( 's.+b', ['a',1,2,3,true] )))\n\n    try {\n      norma( 'si+', ['a'] )\n      assert.fail()\n    }\n    catch(e) { \n      assert.equal('invalid_arguments',e.code)\n    }\n\n    assert.equal( \"[ 'a', 1, 2, 3, foo: [ 1, 2, 3 ] ]\", util.inspect( norma( 's foo:i+', ['a',1,2,3] )))\n    assert.equal( \"{ bar: 'a', foo: [ 1, 2, 3 ] }\", util.inspect( norma( '{bar:s foo:i+}', ['a',1,2,3] )))\n  })\n\n\n  it('no-args', function(){\n    try { norma('s'); assert.fail(); }\n    catch(e) { \n      assert.equal('init',e.code)\n      assert.ok(~e.message.indexOf('no arguments variable')) \n    }\n\n    try { var compiled = norma.compile('s'); compiled(); assert.fail(); }\n    catch(e) { \n      assert.equal('init',e.code)\n      assert.ok(~e.message.indexOf('no arguments variable')) \n    }\n  })\n\n\n  it('error-msg', function(){\n    try { norma('s',[1,{a:1},[10,20]]); assert.fail(); }\n    catch(e) { \n      assert.equal('invalid_arguments',e.code)\n      assert.equal(e.message, \"norma: invalid arguments; expected: \\\"s\\\", was: [ioa]; values: 1,{ a: 1 },[ 10, 20 ]\")\n    }    \n  })\n\n\n  it('optional', function(){\n    assert.equal( \"[ 1, null ]\", util.inspect( norma( 'is?', [1,null] )))\n    assert.equal( \"[ undefined, 1 ]\", util.inspect( norma( 's?i', [undefined,1] )))\n    assert.equal( \"[ NaN, 1 ]\", util.inspect( norma( 's?i', [NaN,1] )))\n  })\n\n\n  it('alt-opt', function(){\n    assert.equal( \"[ true, 'c' ]\", util.inspect( norma( 'bs|i?', [true, \"c\"] )))\n    assert.equal( \"[ true, 1 ]\", util.inspect( norma( 'bs|i?', [true, 1] )))\n    assert.equal( \"[ true, undefined ]\", util.inspect( norma( 'bs|i?', [true] )))\n\n    assert.equal( \"[ true, 'c', false ]\", util.inspect( norma( 'bs|i?b', [true, \"c\", false] )))\n    assert.equal( \"[ true, 1, false ]\", util.inspect( norma( 'bs|i?b', [true, 1, false] )))\n    assert.equal( \"[ true, undefined, false ]\", util.inspect( norma( 'bs|i?b', [true, false] )))\n  })\n\n})\n"]}