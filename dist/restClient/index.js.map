{"version":3,"sources":["../../restClient/index.js"],"names":["fetch","require","debug","querystring","_","recordErrorLog","log","global","__track_outer_api_request_log","url","option","startTime","Date","getTime","endTime","response","status","outer_api_request_log","create","method","payload","toString","body","httpStatus","isObject","JSON","stringify","responseTime","e","fetchRetry","options","retries","retryDelay","Promise","resolve","reject","wrappedFetch","n","then","catch","error","errno","setTimeout","v","apply","pathParamResolve","path","params","Error","Object","keys","forEach","name","replace","encodeURIComponent","getOAuthToken","oAuthConfig","certificate","Buffer","client_id","client_secret","tokenType","Authorization","headers","json","jsonData","err","RestClient","beforeFetch","errorHandle","init","baseUrl","config","data","match","param","timeout","toLowerCase","indexOf","query","agent","needOAuth","oAuthToken","__config","oAuth","resove","text","parse","res"],"mappings":"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","file":"index.js","sourcesContent":["const fetch = require('node-fetch');\nconst debug = require('nirvana-logger')('app:restClient');\nconst querystring = require('querystring');\nimport Model from '@nirvana/nirvana-sdk/kernel/model';\n\nconst _ = require('lodash');\n\n/**\n * 创建错误请求日志记录\n */\nconst recordErrorLog = (log) => {\n    // 如需记录请求日志，请设置 global.__track_outer_api_request_log = true\n    if (!global.__track_outer_api_request_log) return;\n    const {url, option, startTime = new Date().getTime(), endTime = new Date().getTime(), response = {}, status = ''} = log;\n    try {\n        Model.outer_api_request_log.create({\n            url,\n            method: option.method,\n            payload: _.toString(option.body),\n            httpStatus: status,\n            response: _.isObject(response) ? JSON.stringify(response) : _.toString(response),\n            responseTime: endTime - startTime,\n        });\n    } catch (e) {\n    }\n};\n\n/**\n * fetch 重试\n * @param url  node-fetch's url\n * @param options node-fetch's options extend retries and retryDelay\n * @return {Promise}\n */\nfunction fetchRetry(url, options) {\n    let retries = 3;\n    let retryDelay = 1000;\n\n    return new Promise(function(resolve, reject) {\n        let wrappedFetch = function(n) {\n            fetch(url, options).then(function(response) {\n                resolve(response);\n            }).catch(function(error) {\n                if (error.errno === 'ENOTFOUND' && n > 0) {\n                    debug('域名解析失败', `正在重试 ${retries - n} 次`);\n                    setTimeout(function() {\n                        wrappedFetch(--n);\n                    }, retryDelay);\n                } else {\n                    reject(error);\n                }\n            });\n        };\n        wrappedFetch(retries);\n    });\n};\n\n/**\n * {} Object类型判断\n */\nfunction isObject(v) {\n    return (toString.apply(v) === '[object Object]' ||\n        toString.apply(v) === '[object Window]');\n}\n\n/**\n * url参数解决器 /core/{id}/{class} to /core/1/abc\n * @param path\n * @param params\n * @returns {*}\n */\nfunction pathParamResolve(path, params) {\n    if (!isObject(params)) {\n        throw new Error(params);\n    }\n    Object.keys(params).forEach((name) => {\n        path = path.replace('{' + name + '}', encodeURIComponent(params[name]));\n    });\n    return path;\n}\n\n/**\n * 获取oAuth token\n * @returns {Promise<T>|Promise}\n */\nfunction getOAuthToken(oAuthConfig) {\n    return new Promise((resolve, reject) => {\n        const certificate = new Buffer(\n            `${oAuthConfig.client_id}:${oAuthConfig.client_secret}`).toString(\n            'base64');\n        const tokenType = 'Basic';\n\n        const Authorization = tokenType + ' ' + certificate;\n        const url = oAuthConfig.url;\n        let option = {\n            method: 'post',\n            headers: {\n                Authorization,\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        };\n        fetch(url, option).then((response) => response.json()).then((jsonData) => {\n            return resolve(jsonData['access_token']);\n        }).catch((err) => {\n            debug('获取oauthtoken失败', err);\n            reject(err);\n        });\n    });\n}\n\nexport default class RestClient {\n    constructor(beforeFetch = null, errorHandle = null) {\n        this.oAuthConfig = null;\n        this.init();\n        this.beforeFetch = beforeFetch;\n        this.errorHandle = errorHandle;\n    }\n\n    init(oAuthConfig) {\n        this.oAuthConfig = oAuthConfig;\n    }\n\n    /**\n     * 异步request方法\n     * @param baseUrl - baseUrl\n     * @param config - {path, needOAuth, method}\n     * @param data - {payload, query, param}\n     * @returns {Promise.<void>}\n     */\n    async requestAsync(baseUrl, config, data = {}) {\n        let url = baseUrl + config.path;\n\n        // 如果参数在url中\n        if (url.match(/\\{.+\\}/i) && data.param) {\n            url = pathParamResolve(url, data.param);\n        }\n\n        // 设置默认Content-Type为application/json\n        if (!config['Content-Type']) {\n            config['Content-Type'] = 'application/json';\n        }\n\n        const option = {\n            method: config.method,\n            headers: {\n                'Content-Type': config['Content-Type'],\n            },\n            timeout: 2 * 60 * 1000, // 超时时间 2分钟\n        };\n\n        // debug('data:', data);\n        if (data.payload) {\n            if (option.headers['Content-Type'].toLowerCase().indexOf('json') > 0) {\n                option['body'] = JSON.stringify(data.payload);\n            } else {\n                option['body'] = querystring.stringify(data.payload);\n            }\n        }\n        if (data.query) {\n            url += '?' + querystring.stringify(data.query);\n        }\n        // https 选项\n        if (config.agent) {\n            option.agent = config.agent;\n        }\n\n        // oauth\n        if (config.needOAuth) {\n            const oAuthToken = await getOAuthToken(global.__config.oAuth);\n            option.headers.Authorization = 'Bearer ' + oAuthToken;\n        }\n\n        this.beforeFetch && this.beforeFetch(config, data, option);\n\n        // 请求开始时间\n        let startTime = new Date().getTime();\n\n        // 打印日志\n        debug(url, option);\n\n        return fetchRetry(url, option).then((response) => {\n            return new Promise((resove, reject) => {\n                let endTime = new Date().getTime();\n                response.text().then((text) => {\n                    try {\n                        debug('返回结果 =>', text);\n                        resove(JSON.parse(text));\n                        // 记录错误信息\n                        recordErrorLog({url, option, startTime, endTime, response: text, status: response.status});\n                    } catch (err) {\n                        debug('json解析失败 =>', err);\n                        // 记录错误信息\n                        recordErrorLog({url, option, startTime, endTime, response: {res: text, err}, status: response.status});\n                        debug({status: response.status, text});\n                        resove({status: response.status, text});\n                    }\n                });\n            });\n        }).catch((err) => {\n            // 记录错误信息\n            debug('restClient Error=>', err);\n            recordErrorLog({url, option, startTime, endTime: new Date().getTime(), response: {err}});\n            this.errorHandle && this.errorHandle(url, JSON.stringify(data) + '', err + '');\n            return Promise.reject(`restClient Error ==> ${err}`);\n        });\n    }\n};\n"]}