{"version":3,"sources":["../../Diff/index.js"],"names":["oldData","require","newData","xlsx","default","_","fs","obj","getUrl","data","url","prop","typeText","type","console","log","type1","error","array","length","arr","o","s","Object","prototype","toString","call","tt","slice","indexOf","toLowerCase","allDiff","datan","get","type2","oldType","newType","i","allDiffnew","keys","sort","forEach","item","a","push","substring","writeXls","datas","buffer","build","name","writeFileSync"],"mappings":"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","file":"index.js","sourcesContent":["// import creditOld from './creditOld';\n// import creditNew from './creditNew';\n\n// const oldData = require('./kaNiuData/credit_old_2');\n// const newData = require('./creditNew');\n\n// const oldData = require('./kaNiuData/bianliang_old_2');\n// const newData = require('./bianliangNew');\n\n// const oldData = require('./Data/wacaiCreditOld');\n// const newData = require('./Data/wacaiCreditNew');\n\n\nconst oldData = require('./Data/applistAndHistory_old');\nconst newData = require('./Data/applistAndHistory_new');\nconst xlsx = require('node-xlsx').default;\nconst _ = require('lodash');\nconst fs = require('fs');\n\nlet obj = {};\n\nfunction getUrl(data, url) {\n  for (let prop in data) {\n    const typeText = type(data[prop]);\n    console.log('prop',prop,typeText);\n    if (typeText !== 'object' && typeText !== 'array') {\n      let type1 = null;\n      switch (typeText) {\n        case 'NumberLong':\n          type1 = 'NumberLong';\n          break;\n        case 'NumberInt':\n          type1 = 'NumberInt';\n          break;\n        case 'string':\n          type1 = 'string';\n          break;\n        case 'number':\n          type1 = 'number';\n          break;\n        default:\n          console.error('111111111111111111111', typeText);\n          type1 = 'string';\n          break;\n      }\n      obj[url + '.' + prop] = {\n        url: url + '.' + prop,\n        type1,\n      };\n    }\n    if (typeText === 'object') {\n      getUrl(data[prop], url + '.' + prop);\n    }\n    if (typeText === 'array') {\n      const array = data[prop];\n      if (array.length > 0) {\n        for (let arr of array) {\n          getUrl(arr, url + '.' + prop + '[0]');\n        }\n      }\n    }\n  }\n}\n\nfunction type(o) {\n  let s = Object.prototype.toString.call(o);\n  const tt = s.slice(s.indexOf(' ') + 1, s.length - 1).toLowerCase();\n  if (o === 'NumberLong') {\n    return 'NumberLong';\n  }\n  if (o === 'NumberInt') {\n    return 'NumberInt';\n  }\n  return tt;\n}\n\nlet allDiff = {};\n// 得到老数据的所有路径及字段类型\ngetUrl(oldData.data, 'data');\n\n//  对比新数据 找到差异\nfor (let prop in obj) {\n  const url = obj[prop].url;\n  const type1 = obj[prop].type1;\n  const datan = _.get(newData, url);\n  const type2 = type(datan);\n  if (!allDiff[url]) {\n    allDiff[url] = {\n      oldType: type1,\n      newType: type2,\n    };\n  }\n}\nobj = {};\n\n// 得到新数据的所有路径及字段类型\ngetUrl(newData.data, 'data');\n\n//  对比新数据 找到差异\nfor (let prop in obj) {\n  const url = obj[prop].url;\n  const type1 = obj[prop].type1;\n  const datan = _.get(oldData, url);\n  const type2 = type(datan);\n  let i = 0;\n  if (!allDiff[url]) {\n    i = i + 1;\n    allDiff[url] = {\n      oldType: type2,\n      newType: type1,\n      i,\n    };\n  }\n}\n\n// 排序\nconst allDiffnew = {};\nObject.keys(allDiff).sort().forEach((item) => {\n  allDiffnew[item] = allDiff[item];\n});\n\nlet array = [];\nfor (let a in allDiffnew) {\n  //  只要类型有差异的数据\n  if (allDiffnew[a].oldType !== allDiffnew[a].newType) {\n    let arr = [];\n    arr.push(a.substring(a.indexOf('.') + 1));\n    arr.push(allDiffnew[a].oldType);\n    arr.push(allDiffnew[a].newType);\n    array.push(arr);\n  }\n}\n\nfunction writeXls(datas) {\n  const buffer = xlsx.build([{name: 'mySheetName', data: datas}]);\n  fs.writeFileSync('applistAndHistory_02.xlsx', buffer, 'binary');\n}\n\nwriteXls(array);"]}