{"version":3,"sources":["../../../Diff/Data/getType.js"],"names":["newData","require","xlsx","default","_","fs","obj","getUrl","data","url","prop","typeText","type","console","log","type1","error","array","length","arr","o","s","Object","prototype","toString","call","tt","slice","indexOf","toLowerCase","a","push","substring","writeXls","datas","buffer","build","name","writeFileSync"],"mappings":";;AACA,IAAMA,UAAUC,QAAQ,yBAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,WAAR,EAAqBE,OAAlC;AACA,IAAMC,IAAIH,QAAQ,QAAR,CAAV;AACA,IAAMI,KAAKJ,QAAQ,IAAR,CAAX;;AAEA,IAAIK,MAAM,EAAV;;AAGA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2B;AACzB,OAAK,IAAIC,IAAT,IAAiBF,IAAjB,EAAuB;AACrB,QAAMG,WAAWC,KAAKJ,KAAKE,IAAL,CAAL,CAAjB;AACAG,YAAQC,GAAR,CAAY,MAAZ,EAAmBJ,IAAnB,EAAwBC,QAAxB;AACA,QAAIA,aAAa,QAAb,IAAyBA,aAAa,OAA1C,EAAmD;AACjD,UAAII,QAAQ,IAAZ;AACA,cAAQJ,QAAR;AACE,aAAK,YAAL;AACEI,kBAAQ,YAAR;AACA;AACF,aAAK,WAAL;AACEA,kBAAQ,WAAR;AACA;AACF,aAAK,QAAL;AACEA,kBAAQ,QAAR;AACA;AACF,aAAK,QAAL;AACEA,kBAAQ,QAAR;AACA;AACF;AACEF,kBAAQG,KAAR,CAAc,uBAAd,EAAuCL,QAAvC;AACAI,kBAAQ,QAAR;AACA;AAhBJ;AAkBAT,UAAIG,MAAM,GAAN,GAAYC,IAAhB,IAAwB;AACtBD,aAAKA,MAAM,GAAN,GAAYC,IADK;AAEtBK;AAFsB,OAAxB;AAID;AACD,QAAIJ,aAAa,QAAjB,EAA2B;AACzBJ,aAAOC,KAAKE,IAAL,CAAP,EAAmBD,MAAM,GAAN,GAAYC,IAA/B;AACD;AACD,QAAIC,aAAa,OAAjB,EAA0B;AACxB,UAAMM,SAAQT,KAAKE,IAAL,CAAd;AACA,UAAIO,OAAMC,MAAN,GAAe,CAAnB,EAAsB;AAAA;AAAA;AAAA;;AAAA;AACpB,+BAAgBD,MAAhB,8HAAuB;AAAA,gBAAdE,GAAc;;AACrBZ,mBAAOY,GAAP,EAAYV,MAAM,GAAN,GAAYC,IAAZ,GAAmB,KAA/B;AACD;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIrB;AACF;AACF;AACF;AACD,SAASE,IAAT,CAAcQ,CAAd,EAAiB;AACf,MAAIC,IAAIC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,CAA/B,CAAR;AACA,MAAMM,KAAKL,EAAEM,KAAF,CAAQN,EAAEO,OAAF,CAAU,GAAV,IAAiB,CAAzB,EAA4BP,EAAEH,MAAF,GAAW,CAAvC,EAA0CW,WAA1C,EAAX;AACA,MAAIT,MAAM,YAAV,EAAwB;AACtB,WAAO,YAAP;AACD;AACD,MAAIA,MAAM,WAAV,EAAuB;AACrB,WAAO,WAAP;AACD;AACD,SAAOM,EAAP;AACD;;AAGDnB,OAAOP,QAAQQ,IAAf,EAAqB,MAArB;;AAEA,IAAIS,QAAQ,EAAZ;AACA,KAAK,IAAIa,CAAT,IAAcxB,GAAd,EAAmB;AACf,MAAIa,MAAM,EAAV;AACAA,MAAIY,IAAJ,CAASD,EAAEE,SAAF,CAAYF,EAAEF,OAAF,CAAU,GAAV,IAAiB,CAA7B,CAAT;AACAT,MAAIY,IAAJ,CAASzB,IAAIwB,CAAJ,EAAOf,KAAhB;AACAE,QAAMc,IAAN,CAAWZ,GAAX;AACH;;AAID,SAASc,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAMC,SAASjC,KAAKkC,KAAL,CAAW,CAAC,EAACC,MAAM,aAAP,EAAsB7B,MAAM0B,KAA5B,EAAD,CAAX,CAAf;AACA7B,KAAGiC,aAAH,CAAiB,4BAAjB,EAA+CH,MAA/C,EAAuD,QAAvD;AACD;;AAEDF,SAAShB,KAAT","file":"getType.js","sourcesContent":["\nconst newData = require('./applistAndHistory_new');\nconst xlsx = require('node-xlsx').default;\nconst _ = require('lodash');\nconst fs = require('fs');\n\nlet obj = {};\n\n\nfunction getUrl(data, url) {\n  for (let prop in data) {\n    const typeText = type(data[prop]);\n    console.log('prop',prop,typeText);\n    if (typeText !== 'object' && typeText !== 'array') {\n      let type1 = null;\n      switch (typeText) {\n        case 'NumberLong':\n          type1 = 'NumberLong';\n          break;\n        case 'NumberInt':\n          type1 = 'NumberInt';\n          break;\n        case 'string':\n          type1 = 'string';\n          break;\n        case 'number':\n          type1 = 'number';\n          break;\n        default:\n          console.error('111111111111111111111', typeText);\n          type1 = 'string';\n          break;\n      }\n      obj[url + '.' + prop] = {\n        url: url + '.' + prop,\n        type1,\n      };\n    }\n    if (typeText === 'object') {\n      getUrl(data[prop], url + '.' + prop);\n    }\n    if (typeText === 'array') {\n      const array = data[prop];\n      if (array.length > 0) {\n        for (let arr of array) {\n          getUrl(arr, url + '.' + prop + '[0]');\n        }\n      }\n    }\n  }\n}\nfunction type(o) {\n  let s = Object.prototype.toString.call(o);\n  const tt = s.slice(s.indexOf(' ') + 1, s.length - 1).toLowerCase();\n  if (o === 'NumberLong') {\n    return 'NumberLong';\n  }\n  if (o === 'NumberInt') {\n    return 'NumberInt';\n  }\n  return tt;\n}\n\n\ngetUrl(newData.data, 'data');\n\nlet array = [];\nfor (let a in obj) {\n    let arr = [];\n    arr.push(a.substring(a.indexOf('.') + 1));\n    arr.push(obj[a].type1);\n    array.push(arr);\n}\n\n\n\nfunction writeXls(datas) {\n  const buffer = xlsx.build([{name: 'mySheetName', data: datas}]);\n  fs.writeFileSync('applistAndHistory_new.xlsx', buffer, 'binary');\n}\n\nwriteXls(array);"]}